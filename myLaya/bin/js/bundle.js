var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
const GameLaunch_1 = require("./GameLaunch");
/*
* 游戏初始化配置;
*/
class GameConfig {
    constructor() { }
    static init() {
        var reg = Laya.ClassUtils.regClass;
        reg("GameLaunch.ts", GameLaunch_1.default);
    }
}
GameConfig.width = 640;
GameConfig.height = 1136;
GameConfig.scaleMode = "fixedwidth";
GameConfig.screenMode = "none";
GameConfig.alignV = "top";
GameConfig.alignH = "left";
GameConfig.startScene = "GameMain.scene";
GameConfig.sceneRoot = "";
GameConfig.debug = false;
GameConfig.stat = false;
GameConfig.physicsDebug = false;
GameConfig.exportSceneToJson = true;
exports.default = GameConfig;
GameConfig.init();

},{"./GameLaunch":2}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Manager_1 = require("./script/manager/Manager");
class GameLaunch extends Laya.Script {
    constructor() {
        super();
        this._showLog = true;
        this._managerList = [];
    }
    onEnable() {
    }
    onAwake() {
        this._managerList.push(new Manager_1.default());
    }
    onDisable() {
        for (let i = 0; i < this._managerList.length; ++i) {
            this._managerList[i].onDestroy();
        }
        this._managerList = [];
    }
    showLog() {
        if (!this._showLog) {
            console.log = () => { };
            console.error = () => { };
        }
    }
}
exports.default = GameLaunch;

},{"./script/manager/Manager":4}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const GameConfig_1 = require("./GameConfig");
class Main {
    constructor() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    onVersionLoaded() {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    }
    onConfigLoaded() {
        //加载IDE指定的场景
        GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene);
    }
}
//激活启动类
new Main();

},{"./GameConfig":1}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ModuleManager_1 = require("./modulemanager/ModuleManager");
const SoundManager_1 = require("./soundmanager/SoundManager");
const UIManager_1 = require("./uimanager/UIManager");
const ResManager_1 = require("./resmanager/ResManager");
const AssetsManager_1 = require("./resmanager/AssetsManager");
class Manager {
    constructor() {
        // Manager.Module;
        // Manager.UI;
        // Manager.Assets;
        // Manager.Sound;
        // Manager.Res;
    }
    static get Assets() {
        if (!this._assetsManager) {
            this._assetsManager = new AssetsManager_1.default();
        }
        return this._assetsManager;
    }
    static get Module() {
        if (!this._moduleManager) {
            this._moduleManager = new ModuleManager_1.default();
        }
        return this._moduleManager;
    }
    static get Sound() {
        if (!this._soundManager) {
            this._soundManager = new SoundManager_1.default();
        }
        return this._soundManager;
    }
    static get UI() {
        if (!this._uiManager) {
            this._uiManager = new UIManager_1.default();
        }
        return this._uiManager;
    }
    static get Res() {
        if (!this._resManager) {
            this._resManager = new ResManager_1.default();
        }
        return this._resManager;
    }
}
/** 资源加载管理 */
Manager._assetsManager = null;
/** 玩法模块加载管理 */
Manager._moduleManager = null;
/** 音频加载管理 */
Manager._soundManager = null;
/** UI管理 */
Manager._uiManager = null;
/** 资源获取管理 */
Manager._resManager = null;
exports.default = Manager;

},{"./modulemanager/ModuleManager":6,"./resmanager/AssetsManager":7,"./resmanager/ResManager":8,"./soundmanager/SoundManager":9,"./uimanager/UIManager":10}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class BaseManager {
}
exports.default = BaseManager;

},{}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseManager_1 = require("../base/BaseManager");
class ModuleManager extends BaseManager_1.default {
    constructor() {
        super();
        this.moduleTable = [];
        this.moduleTable = this.initModule();
    }
    initModule() {
        return [
        // SceneCtrl.getInstance(),
        // MainUICtrl.getInstance(),
        ];
    }
    onDestroy() {
        for (let i in this.moduleTable) {
            let m = this.moduleTable[i];
            m.offTarget && m.offTarget(m);
        }
        this.moduleTable = [];
    }
}
exports.default = ModuleManager;

},{"../base/BaseManager":5}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseManager_1 = require("../base/BaseManager");
class AssetsManager extends BaseManager_1.default {
    constructor() {
        super(...arguments);
        this._assetsList = {};
    }
    /** 加载预制体 */
    // loadPrefab(path: string): Promise<any> {
    //     return this.loadAssetsAsync(path);
    // }
    // /** 加载帧图片 */
    // loadSprite(path: string): Promise<cc.SpriteFrame> {
    //     return this.loadAssetsAsync(path, cc.SpriteFrame);
    // }
    // /** 加载图集 */
    // loadSpriteAtlas(path: string): Promise<cc.SpriteAtlas> {
    //     return this.loadAssetsAsync(path, cc.SpriteAtlas);
    // }
    // /** 加载音频 */
    // loadAudioClip(path: string): Promise<cc.AudioClip>{
    //     return this.loadAssetsAsync(path, cc.AudioClip);
    // }
    // /** 加载配置 */
    // loadConfig(path: string): Promise<cc.JsonAsset>{
    //     return this.loadAssetsAsync(path, cc.JsonAsset);
    // }
    // loadAssetsAsync(path: string, type?: any): Promise<any> {
    //     return new Promise((resolve: Function, reject: Function) => {
    //         let _self = this;
    //         if(_self._assetsList[path]){
    //             resolve(_self._assetsList[path]);
    //         }else{
    //             Laya.loader.load(path, Laya.Handler.create(this, (err, res) => {
    //                 console.log('资源加载---->', err, res);
    //                 if(err){
    //                     reject();
    //                     return;
    //                 }
    //                 _self._assetsList[path] = res;
    //                 resolve(res);
    //             }));
    //         }
    //     });
    // }
    releaseRes(resPath) {
        // cc.loader.releaseRes(resPath);
        this._assetsList[resPath] = null;
    }
    onDestroy() {
        // for(let path in this._assetsList){
        //     this.releaseRes(path);
        // }
        // this._assetsList = {};
    }
}
exports.default = AssetsManager;

},{"../base/BaseManager":5}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseManager_1 = require("../base/BaseManager");
const Manager_1 = require("../Manager");
class ResManager extends BaseManager_1.default {
    constructor() {
        //------------------------------------------------------------
        /** 获取预制体, 并生成实例 */
        // getPrefab(path: string): Promise<Laya.Sprite> {
        //     return this._getPrefab(path);
        // }
        super(...arguments);
        // /** 获取音频 */
        // getAudio(path: string): Promise<cc.AudioClip> {
        //     return this._getAudio(path);
        // }
        // /** 获取resources/textures/draw/目录下的资源 */
        // getDraw(name: string): Promise<cc.SpriteFrame> {
        //     let path = "textures/draw/";
        //     let atlasName = "0-draw"; //没有图集则为空
        //     return this._getSprite(path, name, atlasName);
        // }
        // /** 获取配置 */
        // getMonsterConfig(name: string): Promise<cc.JsonAsset> {
        //     let path = "config/auto/";
        //     return this._getConfig(path + name);
        // }
        // //------------------------------------------------------------
        this._assetMgr = Manager_1.default.Assets;
    }
    // /** 获取图片散图资源，如果获取失败，则从图集里获取 */
    // private _getSprite(path: string, name: string, atlasName?: string): Promise<cc.SpriteFrame> {
    //     return new Promise((resolve, reject) => {
    //         /** 获取散图 */
    //         this._assetMgr.loadSprite(path + name).then((spFrame: cc.SpriteFrame) => {
    //             resolve(spFrame);
    //         }).catch(() => {
    //             /** 没散图则从图集获取 */
    //             this._getSpriteFrameFromAtlas(path + atlasName, name).then((spFrame: cc.SpriteFrame) => {
    //                 resolve(spFrame);
    //             }).catch(() => {
    //                 console.error("[ResManager.ts]----->asset is not exist:", path + name, "--->atlas are not:", atlasName);
    //                 // this._assetMgr.releaseRes(path + atlasName);
    //                 reject();
    //             });
    //         });
    //     });   
    // }
    // private _getSpriteFrameFromAtlas(path: string, name: string): Promise<cc.SpriteFrame> {
    //     return new Promise((resolve, reject) => {
    //         this._assetMgr.loadSpriteAtlas(path).then((res: cc.SpriteAtlas) => {
    //             let spFrame = res.getSpriteFrame(name);
    //             if(spFrame){
    //                 resolve(spFrame);
    //             }else{
    //                 reject();
    //             }
    //         }).catch(() => {
    //             reject();
    //         });
    //     });
    // }
    /** 获取预制体 */
    // private _getPrefab(path: string): Promise<Laya.Sprite> {
    //     return new Promise((resolve, reject) => {
    //         this._assetMgr.loadPrefab(path).then((res) => {
    //             if(res){
    //                 resolve(res);
    //             }else{
    //                 reject();
    //             }
    //         }).catch(() => {
    //             reject();
    //         });
    //     });
    // }
    // private _getConfig(path: string): Promise<cc.JsonAsset> {
    //     return new Promise((resolve, reject) => {
    //         this._assetMgr.loadConfig(path).then((res) => {
    //             if(res){
    //                 resolve(res.json);
    //             }else{
    //                 reject();
    //             }
    //         }).catch(() => {
    //             reject();
    //         });
    //     });
    // }
    // private _getAudio(path: string): Promise<cc.AudioClip> {
    //     return new Promise((resolve, reject) => {
    //         this._assetMgr.loadAudioClip(path).then((audio: cc.AudioClip) => {
    //             if(audio){
    //                 resolve(audio);
    //             }else{
    //                 reject();
    //             }
    //         }).catch(() => {
    //             reject();
    //         });
    //     });
    // }
    onDestroy() {
    }
}
exports.default = ResManager;

},{"../Manager":4,"../base/BaseManager":5}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseManager_1 = require("../base/BaseManager");
class SoundManager extends BaseManager_1.default {
    constructor() {
        super(...arguments);
        this._current = 0;
        this._loadList = {};
    }
    // play(path: string, loop: boolean = false, volume: number = 1){
    //     Manager.Res.getAudio(path).then((audio: cc.AudioClip) => {
    //         this._current = cc.audioEngine.play(audio, loop, volume);
    //         this._loadList[path] = audio;
    //     });
    // }
    // pauseCurrent(){
    //     cc.audioEngine.pause(this._current);
    // }
    // pauseAll(){
    //     cc.audioEngine.pauseAll();
    // }
    // stopCurrent(){
    //     cc.audioEngine.stop(this._current);
    // }
    // stopAll(){
    //     cc.audioEngine.stopAll();
    // }
    // resumeCurrent(){
    //     cc.audioEngine.resume(this._current);
    // }
    // resumeAll(){
    //     cc.audioEngine.resumeAll();
    // }
    onDestroy() {
        this._loadList = {};
    }
}
exports.default = SoundManager;

},{"../base/BaseManager":5}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseManager_1 = require("../base/BaseManager");
let w = 960;
let h = 640;
class viewElement {
}
class UIManager extends BaseManager_1.default {
    constructor() {
        super();
        this._views = {};
        this._root = new Laya.Sprite();
        Laya.stage.addChild(this._root);
        this._root.width = w;
        this._root.height = h;
        this._root.x = 0;
        this._root.y = 0;
    }
    // open(resPath: string, zIndex: number, openEffect: number): Promise<MVCS.View>{
    //     return new Promise((resolve) => {
    //         let view = this._views[resPath];
    //         if(!view){
    //             view = new viewElement();
    //         }
    //         let openSuc = (viewNode: Laya.Sprite) => {
    //             viewNode.zOrder = zIndex;
    //             this._root.addChild(viewNode);
    //         }
    //         if(!view.instance){
    //             this._createView(resPath).then((viewObj: MVCS.View) => {
    //                 openSuc(viewObj.owner.getComponent(Laya.Sprite));
    //                 resolve(viewObj);
    //             });
    //         }else{
    //             view.instance.owner.active = true;
    //             openSuc(view.instance.owner.getComponent(Laya.Sprite));
    //             resolve(view.instance);
    //         }
    //     });
    // }
    // getView<T>(resPath: string): Promise<T>{
    //     return new Promise((resolve) => {
    //         let view: any = this._views[resPath];
    //         if(!view){
    //             this._createView(resPath).then((view: any) => {
    //                 resolve(view.instance);
    //             });
    //         }else{
    //             resolve(view.instance);
    //         }
    //     });
    // }
    close(resPath, isDelete = false) {
        let view = this._views[resPath];
        if (view && view.instance) {
            if (isDelete) {
                view.instance.owner.destroy();
                this._views[resPath] = null;
            }
            else {
                view.instance.owner.active = false;
            }
        }
    }
    // private _createView(resPath: string): Promise<MVCS.View> {
    //     return new Promise((resolve) => {
    //         let view = this._views[resPath];
    //         if(!view){
    //             view = new viewElement();
    //             Manager.Res.getPrefab(resPath).then((viewObj: Laya.Sprite) => {
    //                 let names = resPath.split("/");
    //                 this._root.addChild(viewObj);
    //                 view.instance = viewObj.getComponent(names[names.length - 1]);
    //                 this._views[resPath] = view;
    //                 resolve(view.instance);
    //             });
    //         }else{
    //             resolve(view.instance);
    //         }
    //     });
    // }
    onDestroy() {
        this._views = {};
    }
}
exports.default = UIManager;

},{"../base/BaseManager":5}]},{},[3])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
