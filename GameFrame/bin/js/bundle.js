var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
const GameLaunch_1 = require("./script/GameLaunch");
const GameUI_1 = require("./script/GameUI");
/*
* 游戏初始化配置;
*/
class GameConfig {
    constructor() { }
    static init() {
        var reg = Laya.ClassUtils.regClass;
        reg("script/GameLaunch.ts", GameLaunch_1.default);
        reg("script/GameUI.ts", GameUI_1.default);
    }
}
GameConfig.width = 720;
GameConfig.height = 1280;
GameConfig.scaleMode = "fixedwidth";
GameConfig.screenMode = "none";
GameConfig.alignV = "top";
GameConfig.alignH = "left";
GameConfig.startScene = "GameMain.scene";
GameConfig.sceneRoot = "";
GameConfig.debug = false;
GameConfig.stat = true;
GameConfig.physicsDebug = false;
GameConfig.exportSceneToJson = true;
exports.default = GameConfig;
GameConfig.init();

},{"./script/GameLaunch":3,"./script/GameUI":4}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const GameConfig_1 = require("./GameConfig");
class Main {
    constructor() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    onVersionLoaded() {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    }
    onConfigLoaded() {
        //加载IDE指定的场景
        GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene);
    }
}
//激活启动类
new Main();

},{"./GameConfig":1}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Manager_1 = require("./manager/Manager");
const ResPath_1 = require("./respath/ResPath");
class GameLaunch extends Laya.Script {
    constructor() {
        super();
        this._showLog = true;
        this._managerList = [];
    }
    onAwake() {
        this._managerList.push(new Manager_1.default());
        console.log('[GameLaunch.ts]---->初始化');
        // this.initScene3D();
        this.test();
    }
    test() {
        Manager_1.default.UI.open(ResPath_1.ResPath.uiPath.UI_MainUI, 1, 1);
        Manager_1.default.Res.getMonsterConfig('monster1.json').then((res) => {
            console.log('----json', res[1].name);
        }).catch(() => {
            console.log("fail");
        });
    }
    initScene3D() {
        //添加3D场景
        let scene = new Laya.Scene3D();
        Laya.stage.addChild(scene);
        // var scene: Laya.Scene3D = Laya.stage.addChild(new Laya.Scene3D()) as Laya.Scene3D;
        //添加照相机
        var camera = (scene.addChild(new Laya.Camera(0, 0.1, 100)));
        camera.transform.translate(new Laya.Vector3(0, 10, 3));
        camera.transform.rotate(new Laya.Vector3(-60, 0, 0), true, false);
        //添加方向光
        var directionLight = scene.addChild(new Laya.DirectionLight());
        directionLight.color = new Laya.Vector3(0.6, 0.6, 0.6);
        directionLight.transform.worldMatrix.setForward(new Laya.Vector3(1, -1, 0));
        //添加自定义模型
        var box = scene.addChild(new Laya.MeshSprite3D(Laya.PrimitiveMesh.createBox(1, 1, 1)));
        box.transform.rotate(new Laya.Vector3(0, 45, 0), false, false);
        var material = new Laya.BlinnPhongMaterial();
        Laya.Texture2D.load("res/layabox.png", Laya.Handler.create(null, function (tex) {
            material.albedoTexture = tex;
        }));
        box.meshRenderer.material = material;
        Laya.timer.loop(16, this, () => {
            box.transform.rotate(new Laya.Vector3(0, 120 * 0.016, 0), false, false);
            // box.transform.translate(new Laya.Vector3(0, 0, -0.5 * 0.016), false);
        });
        let isDown = false;
        let x = 0;
        let y = 0;
        Laya.stage.on(Laya.Event.MOUSE_DOWN, this, () => {
            isDown = true;
            x = Laya.MouseManager.instance.mouseX;
            y = Laya.MouseManager.instance.mouseY;
            Manager_1.default.Sound.play(ResPath_1.ResPath.audioPath.btnClick);
        });
        Laya.stage.on(Laya.Event.MOUSE_MOVE, this, () => {
            if (!isDown)
                return;
            let dtx = Laya.MouseManager.instance.mouseX - x;
            let dty = Laya.MouseManager.instance.mouseY - y;
            dtx = dtx > 100 ? 100 : dtx;
            dtx = dtx < -100 ? -100 : dtx;
            dty = dty > 100 ? 100 : dty;
            dty = dty < -100 ? -100 : dty;
            let v3 = new Laya.Vector3(dtx * 0.016 * 0.1, 0, dty * 0.016 * 0.1);
            // Laya.Vector3.Clamp(v3, new Laya.Vector3(-100, -100, -100), new Laya.Vector3(100, 100, 100), v3);
            box.transform.translate(v3, false);
        });
        Laya.stage.on(Laya.Event.MOUSE_UP, this, () => {
            isDown = false;
        });
    }
    onDisable() {
        for (let i = 0; i < this._managerList.length; ++i) {
            this._managerList[i].onDestroy();
        }
        this._managerList = [];
    }
    showLog() {
        if (!this._showLog) {
            console.log = () => { };
            console.error = () => { };
        }
    }
}
exports.default = GameLaunch;

},{"./manager/Manager":5,"./respath/ResPath":12}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const layaMaxUI_1 = require("./../ui/layaMaxUI");
/**
 * 本示例采用非脚本的方式实现，而使用继承页面基类，实现页面逻辑。在IDE里面设置场景的Runtime属性即可和场景进行关联
 * 相比脚本方式，继承式页面类，可以直接使用页面定义的属性（通过IDE内var属性定义），比如this.tipLbll，this.scoreLbl，具有代码提示效果
 * 建议：如果是页面级的逻辑，需要频繁访问页面内多个元素，使用继承式写法，如果是独立小模块，功能单一，建议用脚本方式实现，比如子弹脚本。
 */
class GameUI extends layaMaxUI_1.ui.test.TestSceneUI {
    constructor() {
        super();
        //添加3D场景
        var scene = Laya.stage.addChild(new Laya.Scene3D());
        //添加照相机
        var camera = (scene.addChild(new Laya.Camera(0, 0.1, 100)));
        camera.transform.translate(new Laya.Vector3(0, 3, 3));
        camera.transform.rotate(new Laya.Vector3(-30, 0, 0), true, false);
        //添加方向光
        var directionLight = scene.addChild(new Laya.DirectionLight());
        directionLight.color = new Laya.Vector3(0.6, 0.6, 0.6);
        directionLight.transform.worldMatrix.setForward(new Laya.Vector3(1, -1, 0));
        //添加自定义模型
        var box = scene.addChild(new Laya.MeshSprite3D(Laya.PrimitiveMesh.createBox(1, 1, 1)));
        box.transform.rotate(new Laya.Vector3(0, 45, 0), false, false);
        var material = new Laya.BlinnPhongMaterial();
        Laya.Texture2D.load("res/layabox.png", Laya.Handler.create(null, function (tex) {
            material.albedoTexture = tex;
        }));
        box.meshRenderer.material = material;
    }
}
exports.default = GameUI;

},{"./../ui/layaMaxUI":17}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ModuleManager_1 = require("./modulemanager/ModuleManager");
const SoundManager_1 = require("./soundmanager/SoundManager");
const UIManager_1 = require("./uimanager/UIManager");
const ResManager_1 = require("./resmanager/ResManager");
const AssetsManager_1 = require("./resmanager/AssetsManager");
class Manager {
    constructor() {
        // Manager.Module;
        // Manager.UI;
        // Manager.Assets;
        // Manager.Sound;
        // Manager.Res;
    }
    static get Assets() {
        if (!this._assetsManager) {
            this._assetsManager = new AssetsManager_1.default();
        }
        return this._assetsManager;
    }
    static get Module() {
        if (!this._moduleManager) {
            this._moduleManager = new ModuleManager_1.default();
        }
        return this._moduleManager;
    }
    static get Sound() {
        if (!this._soundManager) {
            this._soundManager = new SoundManager_1.default();
        }
        return this._soundManager;
    }
    static get UI() {
        if (!this._uiManager) {
            this._uiManager = new UIManager_1.default();
        }
        return this._uiManager;
    }
    static get Res() {
        if (!this._resManager) {
            this._resManager = new ResManager_1.default();
        }
        return this._resManager;
    }
}
/** 资源加载管理 */
Manager._assetsManager = null;
/** 玩法模块加载管理 */
Manager._moduleManager = null;
/** 音频加载管理 */
Manager._soundManager = null;
/** UI管理 */
Manager._uiManager = null;
/** 资源获取管理 */
Manager._resManager = null;
exports.default = Manager;

},{"./modulemanager/ModuleManager":7,"./resmanager/AssetsManager":8,"./resmanager/ResManager":9,"./soundmanager/SoundManager":10,"./uimanager/UIManager":11}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class BaseManager {
}
exports.default = BaseManager;

},{}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseManager_1 = require("../base/BaseManager");
class ModuleManager extends BaseManager_1.default {
    constructor() {
        super();
        this.moduleTable = [];
        this.moduleTable = this.initModule();
    }
    initModule() {
        return [
        // SceneCtrl.getInstance(),
        // MainUICtrl.getInstance(),
        ];
    }
    onDestroy() {
        for (let i in this.moduleTable) {
            let m = this.moduleTable[i];
            m.offTarget && m.offTarget(m);
        }
        this.moduleTable = [];
    }
}
exports.default = ModuleManager;

},{"../base/BaseManager":6}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseManager_1 = require("../base/BaseManager");
class AssetsManager extends BaseManager_1.default {
    constructor() {
        super(...arguments);
        this._assetsList = {};
    }
    /** 加载预制体 */
    loadPrefab(path) {
        return this.loadAssetsAsync(path);
    }
    // /** 加载帧图片 */
    // loadSprite(path: string): Promise<cc.SpriteFrame> {
    //     return this.loadAssetsAsync(path, cc.SpriteFrame);
    // }
    // /** 加载图集 */
    // loadSpriteAtlas(path: string): Promise<cc.SpriteAtlas> {
    //     return this.loadAssetsAsync(path, cc.SpriteAtlas);
    // }
    // /** 加载音频 */
    // loadAudioClip(path: string): Promise<cc.AudioClip>{
    //     return this.loadAssetsAsync(path, cc.AudioClip);
    // }
    /** 加载配置 */
    loadConfig(path) {
        return this.loadAssetsAsync(path);
    }
    loadAssetsAsync(path, type) {
        return new Promise((resolve, reject) => {
            let _self = this;
            if (_self._assetsList[path]) {
                resolve(_self._assetsList[path]);
            }
            else {
                Laya.loader.load(path, Laya.Handler.create(this, (res) => {
                    console.log('资源加载---->', res);
                    if (!res) {
                        reject();
                        return;
                    }
                    _self._assetsList[path] = res;
                    resolve(res);
                }));
            }
        });
    }
    releaseRes(resPath) {
        // cc.loader.releaseRes(resPath);
        this._assetsList[resPath] = null;
    }
    onDestroy() {
        // for(let path in this._assetsList){
        //     this.releaseRes(path);
        // }
        // this._assetsList = {};
    }
}
exports.default = AssetsManager;

},{"../base/BaseManager":6}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseManager_1 = require("../base/BaseManager");
const Manager_1 = require("../Manager");
class ResManager extends BaseManager_1.default {
    constructor() {
        super(...arguments);
        // //------------------------------------------------------------
        this._assetMgr = Manager_1.default.Assets;
    }
    //------------------------------------------------------------
    /** 获取预制体, 并生成实例 */
    getPrefab(path) {
        return this._getPrefab(path);
    }
    // /** 获取音频 */
    // getAudio(path: string): Promise<cc.AudioClip> {
    //     return this._getAudio(path);
    // }
    /** 获取resources/textures/draw/目录下的资源 */
    getComp(name) {
        let path = "comp/" + name + ".png";
        // let atlasName = "0-draw"; //没有图集则为空
        return path;
    }
    /** 获取配置 */
    getMonsterConfig(name) {
        let path = "config/auto/";
        return this._getConfig(path + name);
    }
    // /** 获取图片散图资源，如果获取失败，则从图集里获取 */
    // private _getSprite(path: string, name: string, atlasName?: string): Promise<cc.SpriteFrame> {
    //     return new Promise((resolve, reject) => {
    //         /** 获取散图 */
    //         this._assetMgr.loadSprite(path + name).then((spFrame: cc.SpriteFrame) => {
    //             resolve(spFrame);
    //         }).catch(() => {
    //             /** 没散图则从图集获取 */
    //             this._getSpriteFrameFromAtlas(path + atlasName, name).then((spFrame: cc.SpriteFrame) => {
    //                 resolve(spFrame);
    //             }).catch(() => {
    //                 console.error("[ResManager.ts]----->asset is not exist:", path + name, "--->atlas are not:", atlasName);
    //                 // this._assetMgr.releaseRes(path + atlasName);
    //                 reject();
    //             });
    //         });
    //     });   
    // }
    // private _getSpriteFrameFromAtlas(path: string, name: string): Promise<cc.SpriteFrame> {
    //     return new Promise((resolve, reject) => {
    //         this._assetMgr.loadSpriteAtlas(path).then((res: cc.SpriteAtlas) => {
    //             let spFrame = res.getSpriteFrame(name);
    //             if(spFrame){
    //                 resolve(spFrame);
    //             }else{
    //                 reject();
    //             }
    //         }).catch(() => {
    //             reject();
    //         });
    //     });
    // }
    /** 获取预制体 */
    _getPrefab(path) {
        return new Promise((resolve, reject) => {
            this._assetMgr.loadPrefab(path).then((res) => {
                if (res) {
                    resolve(res.create());
                }
                else {
                    reject();
                }
            }).catch(() => {
                reject();
            });
        });
    }
    _getConfig(path) {
        return new Promise((resolve, reject) => {
            this._assetMgr.loadConfig(path).then((res) => {
                if (res) {
                    resolve(res);
                }
                else {
                    reject();
                }
            }).catch(() => {
                reject();
            });
        });
    }
    // private _getAudio(path: string): Promise<cc.AudioClip> {
    //     return new Promise((resolve, reject) => {
    //         this._assetMgr.loadAudioClip(path).then((audio: cc.AudioClip) => {
    //             if(audio){
    //                 resolve(audio);
    //             }else{
    //                 reject();
    //             }
    //         }).catch(() => {
    //             reject();
    //         });
    //     });
    // }
    onDestroy() {
    }
}
exports.default = ResManager;

},{"../Manager":5,"../base/BaseManager":6}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseManager_1 = require("../base/BaseManager");
class SoundManager extends BaseManager_1.default {
    constructor() {
        super(...arguments);
        this._current = 0;
        this._loadList = {};
    }
    play(path, loopNum = 1, volume = 1) {
        // Manager.Res.getAudio(path).then((audio: cc.AudioClip) => {
        //     this._current = cc.audioEngine.play(audio, loop, volume);
        //     this._loadList[path] = audio;
        // });
        Laya.SoundManager.playSound(path, loopNum, Laya.Handler.create(this, () => {
        }), 0);
    }
    // pauseCurrent(){
    //     cc.audioEngine.pause(this._current);
    // }
    // pauseAll(){
    //     cc.audioEngine.pauseAll();
    // }
    // stopCurrent(){
    //     cc.audioEngine.stop(this._current);
    // }
    // stopAll(){
    //     cc.audioEngine.stopAll();
    // }
    // resumeCurrent(){
    //     cc.audioEngine.resume(this._current);
    // }
    // resumeAll(){
    //     cc.audioEngine.resumeAll();
    // }
    onDestroy() {
        this._loadList = {};
    }
}
exports.default = SoundManager;

},{"../base/BaseManager":6}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseManager_1 = require("../base/BaseManager");
const Manager_1 = require("../Manager");
let w = 640;
let h = 1136;
class viewElement {
}
class UIManager extends BaseManager_1.default {
    constructor() {
        super();
        this._views = {};
        this._root = new Laya.Sprite();
        this._root.width = w;
        this._root.height = h;
        this._root.x = 0;
        this._root.y = 0;
        this._root.zOrder = 1;
        let wid = this._root.addComponent(Laya.Widget);
        let dw = Laya.stage.designWidth;
        let dh = Laya.stage.designHeight;
        console.log("UIManager----->LayaStage designW: ", dw, " designH: ", dh);
        wid.centerX = dw / 2;
        wid.centerY = dh / 2;
        Laya.stage.addChild(this._root);
    }
    open(resPath, zIndex, openEffect) {
        return new Promise((resolve) => {
            let view = this._views[resPath];
            if (!view) {
                view = new viewElement();
            }
            let openSuc = (viewNode) => {
                viewNode.zOrder = zIndex || 0;
            };
            if (!view.node) {
                this._createView(resPath).then((viewObj) => {
                    openSuc(viewObj);
                    resolve(viewObj);
                });
            }
            else {
                view.node.visible = true;
                openSuc(view.node);
                resolve(view.node);
            }
        });
    }
    getView(resPath) {
        return new Promise((resolve) => {
            let view = this._views[resPath];
            if (!view) {
                this._createView(resPath).then((view) => {
                    resolve(view.instance);
                });
            }
            else {
                resolve(view.instance);
            }
        });
    }
    /**
     * 关闭ui
     * @param resPath 路径
     * @param isDelete 是否销毁
     */
    close(resPath, isDelete = false) {
        let view = this._views[resPath];
        console.log(view, resPath);
        if (view && view.node) {
            if (isDelete) {
                view.node.destroy();
                this._views[resPath] = null;
            }
            else {
                view.node.visible = false;
            }
        }
    }
    _createView(resPath) {
        return new Promise((resolve) => {
            let view = this._views[resPath];
            if (!view) {
                view = new viewElement();
                Manager_1.default.Res.getPrefab(resPath).then((viewObj) => {
                    let names = resPath.split("/");
                    this._root.addChild(viewObj);
                    view.instance = viewObj.getComponent(names[names.length - 1]);
                    view.node = viewObj;
                    this._views[resPath] = view;
                    resolve(viewObj);
                });
            }
            else {
                resolve(view.node);
            }
        });
    }
    onDestroy() {
        this._views = {};
    }
}
exports.default = UIManager;

},{"../Manager":5,"../base/BaseManager":6}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const UIPath_1 = require("./uipath/UIPath");
const ConfigPath_1 = require("./configpath/ConfigPath");
const AudioPath_1 = require("./audiopath/AudioPath");
const EntityPath_1 = require("./entitypath/EntityPath");
/** 资源路径读取(root: resources) */
var ResPath;
(function (ResPath) {
    ResPath.uiPath = UIPath_1.UIPath;
    ResPath.entityPath = EntityPath_1.EntityPath;
    ResPath.configPath = ConfigPath_1.ConfigPath;
    ResPath.audioPath = AudioPath_1.AudioPath;
})(ResPath = exports.ResPath || (exports.ResPath = {}));

},{"./audiopath/AudioPath":13,"./configpath/ConfigPath":14,"./entitypath/EntityPath":15,"./uipath/UIPath":16}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AudioPath = {
    btnClick: "sound/btn_click.mp3"
};

},{}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigPath = {
    Auto_Monster1: "config/auto/monster1.json",
};

},{}],15:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/** 实体路径 */
exports.EntityPath = {
    /** 怪物 */
    Entity_Monster: "prefabs/fight/monster/Monster",
};

},{}],16:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/** UI路径 */
exports.UIPath = {
    /** 场景UI */
    UI_Scene: "prefabs/scene/SceneView",
    /** 主界面 */
    UI_MainUI: "prefabs/UI/menu/MenuView.prefab",
};

},{}],17:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Scene = Laya.Scene;
var REG = Laya.ClassUtils.regClass;
var ui;
(function (ui) {
    var test;
    (function (test) {
        class TestSceneUI extends Scene {
            constructor() { super(); }
            createChildren() {
                super.createChildren();
                this.loadScene("test/TestScene");
            }
        }
        test.TestSceneUI = TestSceneUI;
        REG("ui.test.TestSceneUI", TestSceneUI);
    })(test = ui.test || (ui.test = {}));
})(ui = exports.ui || (exports.ui = {}));

},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3ByaXZhdGUvdmFyL2ZvbGRlcnMvdzQvZDIxbm03dG4xX3NjMndwMTV5Zno2ODdtMDAwMGduL1QvQXBwVHJhbnNsb2NhdGlvbi85MzRFRDk3RS1BQ0M2LTQ2RDgtOEM4MS1DMDRCQkI4NDZEQjgvZC9MYXlhQWlySURFX2JldGEuYXBwL0NvbnRlbnRzL1Jlc291cmNlcy9hcHAvbm9kZV9tb2R1bGVzL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsInNyYy9HYW1lQ29uZmlnLnRzIiwic3JjL01haW4udHMiLCJzcmMvc2NyaXB0L0dhbWVMYXVuY2gudHMiLCJzcmMvc2NyaXB0L0dhbWVVSS50cyIsInNyYy9zY3JpcHQvbWFuYWdlci9NYW5hZ2VyLnRzIiwic3JjL3NjcmlwdC9tYW5hZ2VyL2Jhc2UvQmFzZU1hbmFnZXIudHMiLCJzcmMvc2NyaXB0L21hbmFnZXIvbW9kdWxlbWFuYWdlci9Nb2R1bGVNYW5hZ2VyLnRzIiwic3JjL3NjcmlwdC9tYW5hZ2VyL3Jlc21hbmFnZXIvQXNzZXRzTWFuYWdlci50cyIsInNyYy9zY3JpcHQvbWFuYWdlci9yZXNtYW5hZ2VyL1Jlc01hbmFnZXIudHMiLCJzcmMvc2NyaXB0L21hbmFnZXIvc291bmRtYW5hZ2VyL1NvdW5kTWFuYWdlci50cyIsInNyYy9zY3JpcHQvbWFuYWdlci91aW1hbmFnZXIvVUlNYW5hZ2VyLnRzIiwic3JjL3NjcmlwdC9yZXNwYXRoL1Jlc1BhdGgudHMiLCJzcmMvc2NyaXB0L3Jlc3BhdGgvYXVkaW9wYXRoL0F1ZGlvUGF0aC50cyIsInNyYy9zY3JpcHQvcmVzcGF0aC9jb25maWdwYXRoL0NvbmZpZ1BhdGgudHMiLCJzcmMvc2NyaXB0L3Jlc3BhdGgvZW50aXR5cGF0aC9FbnRpdHlQYXRoLnRzIiwic3JjL3NjcmlwdC9yZXNwYXRoL3VpcGF0aC9VSVBhdGgudHMiLCJzcmMvdWkvbGF5YU1heFVJLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtB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Q0UsUUFBQSxVQUFVLEdBQUc7SUFDdEIsU0FBUztJQUNULGNBQWMsRUFBRSwrQkFBK0I7Q0FDbEQsQ0FBQTs7Ozs7QUNKRCxXQUFXO0FBQ0UsUUFBQSxNQUFNLEdBQUc7SUFDbEIsV0FBVztJQUNYLFFBQVEsRUFBRSx5QkFBeUI7SUFDbkMsVUFBVTtJQUNWLFNBQVMsRUFBRSxpQ0FBaUM7Q0FDL0MsQ0FBQTs7Ozs7QUNIRCxJQUFPLEtBQUssR0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0FBQ3hCLElBQUksR0FBRyxHQUFhLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDO0FBQzdDLElBQWMsRUFBRSxDQVNmO0FBVEQsV0FBYyxFQUFFO0lBQUMsSUFBQSxJQUFJLENBU3BCO0lBVGdCLFdBQUEsSUFBSTtRQUNqQixpQkFBeUIsU0FBUSxLQUFLO1lBQ2xDLGdCQUFlLEtBQUssRUFBRSxDQUFBLENBQUEsQ0FBQztZQUN2QixjQUFjO2dCQUNWLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztnQkFDdkIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ3JDLENBQUM7U0FDSjtRQU5ZLGdCQUFXLGNBTXZCLENBQUE7UUFDRCxHQUFHLENBQUMscUJBQXFCLEVBQUMsV0FBVyxDQUFDLENBQUM7SUFDM0MsQ0FBQyxFQVRnQixJQUFJLEdBQUosT0FBSSxLQUFKLE9BQUksUUFTcEI7QUFBRCxDQUFDLEVBVGEsRUFBRSxHQUFGLFVBQUUsS0FBRixVQUFFLFFBU2YiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbiAgICB9O1xyXG59KSgpO1xyXG4oZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiLyoqVGhpcyBjbGFzcyBpcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBieSBMYXlhQWlySURFLCBwbGVhc2UgZG8gbm90IG1ha2UgYW55IG1vZGlmaWNhdGlvbnMuICovXHJcbmltcG9ydCBHYW1lTGF1bmNoIGZyb20gXCIuL3NjcmlwdC9HYW1lTGF1bmNoXCJcbmltcG9ydCBHYW1lVUkgZnJvbSBcIi4vc2NyaXB0L0dhbWVVSVwiXHJcbi8qXHJcbiog5ri45oiP5Yid5aeL5YyW6YWN572uO1xyXG4qL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHYW1lQ29uZmlne1xyXG4gICAgc3RhdGljIHdpZHRoOm51bWJlcj03MjA7XHJcbiAgICBzdGF0aWMgaGVpZ2h0Om51bWJlcj0xMjgwO1xyXG4gICAgc3RhdGljIHNjYWxlTW9kZTpzdHJpbmc9XCJmaXhlZHdpZHRoXCI7XHJcbiAgICBzdGF0aWMgc2NyZWVuTW9kZTpzdHJpbmc9XCJub25lXCI7XHJcbiAgICBzdGF0aWMgYWxpZ25WOnN0cmluZz1cInRvcFwiO1xyXG4gICAgc3RhdGljIGFsaWduSDpzdHJpbmc9XCJsZWZ0XCI7XHJcbiAgICBzdGF0aWMgc3RhcnRTY2VuZTphbnk9XCJHYW1lTWFpbi5zY2VuZVwiO1xyXG4gICAgc3RhdGljIHNjZW5lUm9vdDpzdHJpbmc9XCJcIjtcclxuICAgIHN0YXRpYyBkZWJ1Zzpib29sZWFuPWZhbHNlO1xyXG4gICAgc3RhdGljIHN0YXQ6Ym9vbGVhbj10cnVlO1xyXG4gICAgc3RhdGljIHBoeXNpY3NEZWJ1Zzpib29sZWFuPWZhbHNlO1xyXG4gICAgc3RhdGljIGV4cG9ydFNjZW5lVG9Kc29uOmJvb2xlYW49dHJ1ZTtcclxuICAgIGNvbnN0cnVjdG9yKCl7fVxyXG4gICAgc3RhdGljIGluaXQoKXtcclxuICAgICAgICB2YXIgcmVnOiBGdW5jdGlvbiA9IExheWEuQ2xhc3NVdGlscy5yZWdDbGFzcztcclxuICAgICAgICByZWcoXCJzY3JpcHQvR2FtZUxhdW5jaC50c1wiLEdhbWVMYXVuY2gpO1xuICAgICAgICByZWcoXCJzY3JpcHQvR2FtZVVJLnRzXCIsR2FtZVVJKTtcclxuICAgIH1cclxufVxyXG5HYW1lQ29uZmlnLmluaXQoKTsiLCJpbXBvcnQgR2FtZUNvbmZpZyBmcm9tIFwiLi9HYW1lQ29uZmlnXCI7XHJcbmNsYXNzIE1haW4ge1xyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cdFx0Ly/moLnmja5JREXorr7nva7liJ3lp4vljJblvJXmk45cdFx0XHJcblx0XHRpZiAod2luZG93W1wiTGF5YTNEXCJdKSBMYXlhM0QuaW5pdChHYW1lQ29uZmlnLndpZHRoLCBHYW1lQ29uZmlnLmhlaWdodCk7XHJcblx0XHRlbHNlIExheWEuaW5pdChHYW1lQ29uZmlnLndpZHRoLCBHYW1lQ29uZmlnLmhlaWdodCwgTGF5YVtcIldlYkdMXCJdKTtcclxuXHRcdExheWFbXCJQaHlzaWNzXCJdICYmIExheWFbXCJQaHlzaWNzXCJdLmVuYWJsZSgpO1xyXG5cdFx0TGF5YVtcIkRlYnVnUGFuZWxcIl0gJiYgTGF5YVtcIkRlYnVnUGFuZWxcIl0uZW5hYmxlKCk7XHJcblx0XHRMYXlhLnN0YWdlLnNjYWxlTW9kZSA9IEdhbWVDb25maWcuc2NhbGVNb2RlO1xyXG5cdFx0TGF5YS5zdGFnZS5zY3JlZW5Nb2RlID0gR2FtZUNvbmZpZy5zY3JlZW5Nb2RlO1xyXG5cdFx0Ly/lhbzlrrnlvq7kv6HkuI3mlK/mjIHliqDovb1zY2VuZeWQjue8gOWcuuaZr1xyXG5cdFx0TGF5YS5VUkwuZXhwb3J0U2NlbmVUb0pzb24gPSBHYW1lQ29uZmlnLmV4cG9ydFNjZW5lVG9Kc29uO1xyXG5cclxuXHRcdC8v5omT5byA6LCD6K+V6Z2i5p2/77yI6YCa6L+HSURF6K6+572u6LCD6K+V5qih5byP77yM5oiW6ICFdXJs5Zyw5Z2A5aKe5YqgZGVidWc9dHJ1ZeWPguaVsO+8jOWdh+WPr+aJk+W8gOiwg+ivlemdouadv++8iVxyXG5cdFx0aWYgKEdhbWVDb25maWcuZGVidWcgfHwgTGF5YS5VdGlscy5nZXRRdWVyeVN0cmluZyhcImRlYnVnXCIpID09IFwidHJ1ZVwiKSBMYXlhLmVuYWJsZURlYnVnUGFuZWwoKTtcclxuXHRcdGlmIChHYW1lQ29uZmlnLnBoeXNpY3NEZWJ1ZyAmJiBMYXlhW1wiUGh5c2ljc0RlYnVnRHJhd1wiXSkgTGF5YVtcIlBoeXNpY3NEZWJ1Z0RyYXdcIl0uZW5hYmxlKCk7XHJcblx0XHRpZiAoR2FtZUNvbmZpZy5zdGF0KSBMYXlhLlN0YXQuc2hvdygpO1xyXG5cdFx0TGF5YS5hbGVydEdsb2JhbEVycm9yID0gdHJ1ZTtcclxuXHJcblx0XHQvL+a/gOa0u+i1hOa6kOeJiOacrOaOp+WItu+8jHZlcnNpb24uanNvbueUsUlEReWPkeW4g+WKn+iDveiHquWKqOeUn+aIkO+8jOWmguaenOayoeacieS5n+S4jeW9seWTjeWQjue7rea1geeoi1xyXG5cdFx0TGF5YS5SZXNvdXJjZVZlcnNpb24uZW5hYmxlKFwidmVyc2lvbi5qc29uXCIsIExheWEuSGFuZGxlci5jcmVhdGUodGhpcywgdGhpcy5vblZlcnNpb25Mb2FkZWQpLCBMYXlhLlJlc291cmNlVmVyc2lvbi5GSUxFTkFNRV9WRVJTSU9OKTtcclxuXHR9XHJcblxyXG5cdG9uVmVyc2lvbkxvYWRlZCgpOiB2b2lkIHtcclxuXHRcdC8v5r+A5rS75aSn5bCP5Zu+5pig5bCE77yM5Yqg6L295bCP5Zu+55qE5pe25YCZ77yM5aaC5p6c5Y+R546w5bCP5Zu+5Zyo5aSn5Zu+5ZCI6ZuG6YeM6Z2i77yM5YiZ5LyY5YWI5Yqg6L295aSn5Zu+5ZCI6ZuG77yM6ICM5LiN5piv5bCP5Zu+XHJcblx0XHRMYXlhLkF0bGFzSW5mb01hbmFnZXIuZW5hYmxlKFwiZmlsZWNvbmZpZy5qc29uXCIsIExheWEuSGFuZGxlci5jcmVhdGUodGhpcywgdGhpcy5vbkNvbmZpZ0xvYWRlZCkpO1xyXG5cdH1cclxuXHJcblx0b25Db25maWdMb2FkZWQoKTogdm9pZCB7XHJcblx0XHQvL+WKoOi9vUlEReaMh+WumueahOWcuuaZr1xyXG5cdFx0R2FtZUNvbmZpZy5zdGFydFNjZW5lICYmIExheWEuU2NlbmUub3BlbihHYW1lQ29uZmlnLnN0YXJ0U2NlbmUpO1xyXG5cdH1cclxufVxyXG4vL+a/gOa0u+WQr+WKqOexu1xyXG5uZXcgTWFpbigpO1xyXG4iLCJpbXBvcnQgTWFuYWdlciBmcm9tIFwiLi9tYW5hZ2VyL01hbmFnZXJcIjtcclxuaW1wb3J0IHsgUmVzUGF0aCB9IGZyb20gXCIuL3Jlc3BhdGgvUmVzUGF0aFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZUxhdW5jaCBleHRlbmRzIExheWEuU2NyaXB0IHtcclxuICAgIHByaXZhdGUgX3Nob3dMb2c6IGJvb2xlYW4gPSB0cnVlO1xyXG4gICAgcHJpdmF0ZSBfbWFuYWdlckxpc3QgPSBbXTtcclxuICAgIGNvbnN0cnVjdG9yKCkgeyBzdXBlcigpOyB9XHJcbiAgICBcclxuICAgIG9uQXdha2UoKXtcclxuICAgICAgICB0aGlzLl9tYW5hZ2VyTGlzdC5wdXNoKG5ldyBNYW5hZ2VyKCkpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdbR2FtZUxhdW5jaC50c10tLS0tPuWIneWni+WMlicpO1xyXG4gICAgICAgIC8vIHRoaXMuaW5pdFNjZW5lM0QoKTtcclxuICAgICAgICB0aGlzLnRlc3QoKTtcclxuICAgIH1cclxuXHJcbiAgICB0ZXN0KCl7XHJcbiAgICAgICAgTWFuYWdlci5VSS5vcGVuKFJlc1BhdGgudWlQYXRoLlVJX01haW5VSSwgMSwgMSk7XHJcblxyXG4gICAgICAgIE1hbmFnZXIuUmVzLmdldE1vbnN0ZXJDb25maWcoJ21vbnN0ZXIxLmpzb24nKS50aGVuKChyZXMpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJy0tLS1qc29uJywgcmVzWzFdLm5hbWUpO1xyXG4gICAgICAgIH0pLmNhdGNoKCgpPT57XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZmFpbFwiKVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGluaXRTY2VuZTNEKCl7XHJcbiAgICAgICAgLy/mt7vliqAzROWcuuaZr1xyXG4gICAgICAgIGxldCBzY2VuZSA9IG5ldyBMYXlhLlNjZW5lM0QoKTtcclxuICAgICAgICBMYXlhLnN0YWdlLmFkZENoaWxkKHNjZW5lKTtcclxuICAgICAgICAvLyB2YXIgc2NlbmU6IExheWEuU2NlbmUzRCA9IExheWEuc3RhZ2UuYWRkQ2hpbGQobmV3IExheWEuU2NlbmUzRCgpKSBhcyBMYXlhLlNjZW5lM0Q7XHJcblxyXG4gICAgICAgIC8v5re75Yqg54Wn55u45py6XHJcbiAgICAgICAgdmFyIGNhbWVyYTogTGF5YS5DYW1lcmEgPSAoc2NlbmUuYWRkQ2hpbGQobmV3IExheWEuQ2FtZXJhKDAsIDAuMSwgMTAwKSkpIGFzIExheWEuQ2FtZXJhO1xyXG4gICAgICAgIGNhbWVyYS50cmFuc2Zvcm0udHJhbnNsYXRlKG5ldyBMYXlhLlZlY3RvcjMoMCwgMTAsIDMpKTtcclxuICAgICAgICBjYW1lcmEudHJhbnNmb3JtLnJvdGF0ZShuZXcgTGF5YS5WZWN0b3IzKC02MCwgMCwgMCksIHRydWUsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgLy/mt7vliqDmlrnlkJHlhYlcclxuICAgICAgICB2YXIgZGlyZWN0aW9uTGlnaHQ6IExheWEuRGlyZWN0aW9uTGlnaHQgPSBzY2VuZS5hZGRDaGlsZChuZXcgTGF5YS5EaXJlY3Rpb25MaWdodCgpKSBhcyBMYXlhLkRpcmVjdGlvbkxpZ2h0O1xyXG4gICAgICAgIGRpcmVjdGlvbkxpZ2h0LmNvbG9yID0gbmV3IExheWEuVmVjdG9yMygwLjYsIDAuNiwgMC42KTtcclxuICAgICAgICBkaXJlY3Rpb25MaWdodC50cmFuc2Zvcm0ud29ybGRNYXRyaXguc2V0Rm9yd2FyZChuZXcgTGF5YS5WZWN0b3IzKDEsIC0xLCAwKSk7XHJcblxyXG4gICAgICAgIC8v5re75Yqg6Ieq5a6a5LmJ5qih5Z6LXHJcbiAgICAgICAgdmFyIGJveDogTGF5YS5NZXNoU3ByaXRlM0QgPSBzY2VuZS5hZGRDaGlsZChuZXcgTGF5YS5NZXNoU3ByaXRlM0QoTGF5YS5QcmltaXRpdmVNZXNoLmNyZWF0ZUJveCgxLCAxLCAxKSkpIGFzIExheWEuTWVzaFNwcml0ZTNEO1xyXG4gICAgICAgIGJveC50cmFuc2Zvcm0ucm90YXRlKG5ldyBMYXlhLlZlY3RvcjMoMCwgNDUsIDApLCBmYWxzZSwgZmFsc2UpO1xyXG4gICAgICAgIHZhciBtYXRlcmlhbDogTGF5YS5CbGlublBob25nTWF0ZXJpYWwgPSBuZXcgTGF5YS5CbGlublBob25nTWF0ZXJpYWwoKTtcclxuXHRcdExheWEuVGV4dHVyZTJELmxvYWQoXCJyZXMvbGF5YWJveC5wbmdcIiwgTGF5YS5IYW5kbGVyLmNyZWF0ZShudWxsLCBmdW5jdGlvbih0ZXg6TGF5YS5UZXh0dXJlMkQpIHtcclxuXHRcdFx0XHRtYXRlcmlhbC5hbGJlZG9UZXh0dXJlID0gdGV4O1xyXG5cdFx0fSkpO1xyXG4gICAgICAgIGJveC5tZXNoUmVuZGVyZXIubWF0ZXJpYWwgPSBtYXRlcmlhbDtcclxuICAgICAgICBMYXlhLnRpbWVyLmxvb3AoMTYsIHRoaXMsICgpID0+IHtcclxuICAgICAgICAgICAgYm94LnRyYW5zZm9ybS5yb3RhdGUobmV3IExheWEuVmVjdG9yMygwLCAxMjAgKiAwLjAxNiwgMCksIGZhbHNlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIC8vIGJveC50cmFuc2Zvcm0udHJhbnNsYXRlKG5ldyBMYXlhLlZlY3RvcjMoMCwgMCwgLTAuNSAqIDAuMDE2KSwgZmFsc2UpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGxldCBpc0Rvd24gPSBmYWxzZTtcclxuICAgICAgICBsZXQgeCA9IDA7XHJcbiAgICAgICAgbGV0IHkgPSAwO1xyXG4gICAgICAgIExheWEuc3RhZ2Uub24oTGF5YS5FdmVudC5NT1VTRV9ET1dOLCB0aGlzLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGlzRG93biA9IHRydWU7XHJcbiAgICAgICAgICAgIHggPSBMYXlhLk1vdXNlTWFuYWdlci5pbnN0YW5jZS5tb3VzZVg7XHJcbiAgICAgICAgICAgIHkgPSBMYXlhLk1vdXNlTWFuYWdlci5pbnN0YW5jZS5tb3VzZVk7XHJcbiAgICAgICAgICAgIE1hbmFnZXIuU291bmQucGxheShSZXNQYXRoLmF1ZGlvUGF0aC5idG5DbGljayk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgTGF5YS5zdGFnZS5vbihMYXlhLkV2ZW50Lk1PVVNFX01PVkUsIHRoaXMsICgpID0+IHtcclxuICAgICAgICAgICAgaWYoIWlzRG93bikgcmV0dXJuO1xyXG4gICAgICAgICAgICBsZXQgZHR4ID0gTGF5YS5Nb3VzZU1hbmFnZXIuaW5zdGFuY2UubW91c2VYIC0geDtcclxuICAgICAgICAgICAgbGV0IGR0eSA9IExheWEuTW91c2VNYW5hZ2VyLmluc3RhbmNlLm1vdXNlWSAtIHk7XHJcbiAgICAgICAgICAgIGR0eCA9IGR0eCA+IDEwMCA/IDEwMCA6IGR0eDtcclxuICAgICAgICAgICAgZHR4ID0gZHR4IDwgLTEwMCA/IC0xMDAgOiBkdHg7XHJcbiAgICAgICAgICAgIGR0eSA9IGR0eSA+IDEwMCA/IDEwMCA6IGR0eTtcclxuICAgICAgICAgICAgZHR5ID0gZHR5IDwgLTEwMCA/IC0xMDAgOiBkdHk7XHJcbiAgICAgICAgICAgIGxldCB2MyA9IG5ldyBMYXlhLlZlY3RvcjMoZHR4ICogMC4wMTYgKiAwLjEsIDAsIGR0eSAqIDAuMDE2ICogMC4xKTtcclxuICAgICAgICAgICAgLy8gTGF5YS5WZWN0b3IzLkNsYW1wKHYzLCBuZXcgTGF5YS5WZWN0b3IzKC0xMDAsIC0xMDAsIC0xMDApLCBuZXcgTGF5YS5WZWN0b3IzKDEwMCwgMTAwLCAxMDApLCB2Myk7XHJcbiAgICAgICAgICAgIGJveC50cmFuc2Zvcm0udHJhbnNsYXRlKHYzLCBmYWxzZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgTGF5YS5zdGFnZS5vbihMYXlhLkV2ZW50Lk1PVVNFX1VQLCB0aGlzLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGlzRG93biA9IGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG9uRGlzYWJsZSgpOiB2b2lkIHtcclxuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5fbWFuYWdlckxpc3QubGVuZ3RoOyArK2kpe1xyXG4gICAgICAgICAgICB0aGlzLl9tYW5hZ2VyTGlzdFtpXS5vbkRlc3Ryb3koKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fbWFuYWdlckxpc3QgPSBbXTtcclxuICAgIH1cclxuXHJcbiAgICBzaG93TG9nKCl7XHJcbiAgICAgICAgaWYoIXRoaXMuX3Nob3dMb2cpe1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyA9ICgpID0+IHt9O1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yID0gKCkgPT4ge307XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgdWkgfSBmcm9tIFwiLi8uLi91aS9sYXlhTWF4VUlcIjtcclxuLyoqXHJcbiAqIOacrOekuuS+i+mHh+eUqOmdnuiEmuacrOeahOaWueW8j+WunueOsO+8jOiAjOS9v+eUqOe7p+aJv+mhtemdouWfuuexu++8jOWunueOsOmhtemdoumAu+i+keOAguWcqElERemHjOmdouiuvue9ruWcuuaZr+eahFJ1bnRpbWXlsZ7mgKfljbPlj6/lkozlnLrmma/ov5vooYzlhbPogZRcclxuICog55u45q+U6ISa5pys5pa55byP77yM57un5om/5byP6aG16Z2i57G777yM5Y+v5Lul55u05o6l5L2/55So6aG16Z2i5a6a5LmJ55qE5bGe5oCn77yI6YCa6L+HSURF5YaFdmFy5bGe5oCn5a6a5LmJ77yJ77yM5q+U5aaCdGhpcy50aXBMYmxs77yMdGhpcy5zY29yZUxibO+8jOWFt+acieS7o+eggeaPkOekuuaViOaenFxyXG4gKiDlu7rorq7vvJrlpoLmnpzmmK/pobXpnaLnuqfnmoTpgLvovpHvvIzpnIDopoHpopHnuYHorr/pl67pobXpnaLlhoXlpJrkuKrlhYPntKDvvIzkvb/nlKjnu6fmib/lvI/lhpnms5XvvIzlpoLmnpzmmK/ni6znq4vlsI/mqKHlnZfvvIzlip/og73ljZXkuIDvvIzlu7rorq7nlKjohJrmnKzmlrnlvI/lrp7njrDvvIzmr5TlpoLlrZDlvLnohJrmnKzjgIJcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWVVSSBleHRlbmRzIHVpLnRlc3QuVGVzdFNjZW5lVUkge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuXHRcdFxyXG4gICAgICAgIC8v5re75YqgM0TlnLrmma9cclxuICAgICAgICB2YXIgc2NlbmU6IExheWEuU2NlbmUzRCA9IExheWEuc3RhZ2UuYWRkQ2hpbGQobmV3IExheWEuU2NlbmUzRCgpKSBhcyBMYXlhLlNjZW5lM0Q7XHJcblxyXG4gICAgICAgIC8v5re75Yqg54Wn55u45py6XHJcbiAgICAgICAgdmFyIGNhbWVyYTogTGF5YS5DYW1lcmEgPSAoc2NlbmUuYWRkQ2hpbGQobmV3IExheWEuQ2FtZXJhKDAsIDAuMSwgMTAwKSkpIGFzIExheWEuQ2FtZXJhO1xyXG4gICAgICAgIGNhbWVyYS50cmFuc2Zvcm0udHJhbnNsYXRlKG5ldyBMYXlhLlZlY3RvcjMoMCwgMywgMykpO1xyXG4gICAgICAgIGNhbWVyYS50cmFuc2Zvcm0ucm90YXRlKG5ldyBMYXlhLlZlY3RvcjMoLTMwLCAwLCAwKSwgdHJ1ZSwgZmFsc2UpO1xyXG5cclxuICAgICAgICAvL+a3u+WKoOaWueWQkeWFiVxyXG4gICAgICAgIHZhciBkaXJlY3Rpb25MaWdodDogTGF5YS5EaXJlY3Rpb25MaWdodCA9IHNjZW5lLmFkZENoaWxkKG5ldyBMYXlhLkRpcmVjdGlvbkxpZ2h0KCkpIGFzIExheWEuRGlyZWN0aW9uTGlnaHQ7XHJcbiAgICAgICAgZGlyZWN0aW9uTGlnaHQuY29sb3IgPSBuZXcgTGF5YS5WZWN0b3IzKDAuNiwgMC42LCAwLjYpO1xyXG4gICAgICAgIGRpcmVjdGlvbkxpZ2h0LnRyYW5zZm9ybS53b3JsZE1hdHJpeC5zZXRGb3J3YXJkKG5ldyBMYXlhLlZlY3RvcjMoMSwgLTEsIDApKTtcclxuXHJcbiAgICAgICAgLy/mt7vliqDoh6rlrprkuYnmqKHlnotcclxuICAgICAgICB2YXIgYm94OiBMYXlhLk1lc2hTcHJpdGUzRCA9IHNjZW5lLmFkZENoaWxkKG5ldyBMYXlhLk1lc2hTcHJpdGUzRChMYXlhLlByaW1pdGl2ZU1lc2guY3JlYXRlQm94KDEsIDEsIDEpKSkgYXMgTGF5YS5NZXNoU3ByaXRlM0Q7XHJcbiAgICAgICAgYm94LnRyYW5zZm9ybS5yb3RhdGUobmV3IExheWEuVmVjdG9yMygwLCA0NSwgMCksIGZhbHNlLCBmYWxzZSk7XHJcbiAgICAgICAgdmFyIG1hdGVyaWFsOiBMYXlhLkJsaW5uUGhvbmdNYXRlcmlhbCA9IG5ldyBMYXlhLkJsaW5uUGhvbmdNYXRlcmlhbCgpO1xyXG5cdFx0TGF5YS5UZXh0dXJlMkQubG9hZChcInJlcy9sYXlhYm94LnBuZ1wiLCBMYXlhLkhhbmRsZXIuY3JlYXRlKG51bGwsIGZ1bmN0aW9uKHRleDpMYXlhLlRleHR1cmUyRCkge1xyXG5cdFx0XHRcdG1hdGVyaWFsLmFsYmVkb1RleHR1cmUgPSB0ZXg7XHJcblx0XHR9KSk7XHJcbiAgICAgICAgYm94Lm1lc2hSZW5kZXJlci5tYXRlcmlhbCA9IG1hdGVyaWFsO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IE1vZHVsZU1hbmFnZXIgZnJvbSBcIi4vbW9kdWxlbWFuYWdlci9Nb2R1bGVNYW5hZ2VyXCI7XG5pbXBvcnQgU291bmRNYW5hZ2VyIGZyb20gXCIuL3NvdW5kbWFuYWdlci9Tb3VuZE1hbmFnZXJcIjtcbmltcG9ydCBVSU1hbmFnZXIgZnJvbSBcIi4vdWltYW5hZ2VyL1VJTWFuYWdlclwiO1xuaW1wb3J0IFJlc01hbmFnZXIgZnJvbSBcIi4vcmVzbWFuYWdlci9SZXNNYW5hZ2VyXCI7XG5pbXBvcnQgQXNzZXRzTWFuYWdlciBmcm9tIFwiLi9yZXNtYW5hZ2VyL0Fzc2V0c01hbmFnZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFuYWdlciB7XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgLy8gTWFuYWdlci5Nb2R1bGU7XG4gICAgICAgIC8vIE1hbmFnZXIuVUk7XG4gICAgICAgIC8vIE1hbmFnZXIuQXNzZXRzO1xuICAgICAgICAvLyBNYW5hZ2VyLlNvdW5kO1xuICAgICAgICAvLyBNYW5hZ2VyLlJlcztcbiAgICB9XG4gICAgLyoqIOi1hOa6kOWKoOi9veeuoeeQhiAqL1xuICAgIHByaXZhdGUgc3RhdGljIF9hc3NldHNNYW5hZ2VyOiBBc3NldHNNYW5hZ2VyID0gbnVsbDtcbiAgICBwdWJsaWMgc3RhdGljIGdldCBBc3NldHMoKXtcbiAgICAgICAgaWYoIXRoaXMuX2Fzc2V0c01hbmFnZXIpe1xuICAgICAgICAgICAgdGhpcy5fYXNzZXRzTWFuYWdlciA9IG5ldyBBc3NldHNNYW5hZ2VyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2Fzc2V0c01hbmFnZXI7XG4gICAgfVxuXG4gICAgLyoqIOeOqeazleaooeWdl+WKoOi9veeuoeeQhiAqL1xuICAgIHByaXZhdGUgc3RhdGljIF9tb2R1bGVNYW5hZ2VyOiBNb2R1bGVNYW5hZ2VyID0gbnVsbDtcbiAgICBwdWJsaWMgc3RhdGljIGdldCBNb2R1bGUoKXtcbiAgICAgICAgaWYoIXRoaXMuX21vZHVsZU1hbmFnZXIpe1xuICAgICAgICAgICAgdGhpcy5fbW9kdWxlTWFuYWdlciA9IG5ldyBNb2R1bGVNYW5hZ2VyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX21vZHVsZU1hbmFnZXI7XG4gICAgfVxuXG4gICAgLyoqIOmfs+mikeWKoOi9veeuoeeQhiAqL1xuICAgIHByaXZhdGUgc3RhdGljIF9zb3VuZE1hbmFnZXI6IFNvdW5kTWFuYWdlciA9IG51bGw7XG4gICAgcHVibGljIHN0YXRpYyBnZXQgU291bmQoKXtcbiAgICAgICAgaWYoIXRoaXMuX3NvdW5kTWFuYWdlcil7XG4gICAgICAgICAgICB0aGlzLl9zb3VuZE1hbmFnZXIgPSBuZXcgU291bmRNYW5hZ2VyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3NvdW5kTWFuYWdlcjtcbiAgICB9XG5cbiAgICAvKiogVUnnrqHnkIYgKi9cbiAgICBwcml2YXRlIHN0YXRpYyBfdWlNYW5hZ2VyOiBVSU1hbmFnZXIgPSBudWxsO1xuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IFVJKCl7XG4gICAgICAgIGlmKCF0aGlzLl91aU1hbmFnZXIpe1xuICAgICAgICAgICAgdGhpcy5fdWlNYW5hZ2VyID0gbmV3IFVJTWFuYWdlcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl91aU1hbmFnZXI7XG4gICAgfVxuXG4gICAgLyoqIOi1hOa6kOiOt+WPlueuoeeQhiAqL1xuICAgIHByaXZhdGUgc3RhdGljIF9yZXNNYW5hZ2VyOiBSZXNNYW5hZ2VyID0gbnVsbDtcbiAgICBwdWJsaWMgc3RhdGljIGdldCBSZXMoKXtcbiAgICAgICAgaWYoIXRoaXMuX3Jlc01hbmFnZXIpe1xuICAgICAgICAgICAgdGhpcy5fcmVzTWFuYWdlciA9IG5ldyBSZXNNYW5hZ2VyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc01hbmFnZXI7IFxuICAgIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGFic3RyYWN0IGNsYXNzIEJhc2VNYW5hZ2VyIHtcbiAgICBhYnN0cmFjdCBvbkRlc3Ryb3koKTogdm9pZDtcbn0iLCJpbXBvcnQgQmFzZU1hbmFnZXIgZnJvbSBcIi4uL2Jhc2UvQmFzZU1hbmFnZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9kdWxlTWFuYWdlciBleHRlbmRzIEJhc2VNYW5hZ2Vye1xuICAgIG1vZHVsZVRhYmxlID0gW107XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5tb2R1bGVUYWJsZSA9IHRoaXMuaW5pdE1vZHVsZSgpO1xuICAgIH1cblxuICAgIGluaXRNb2R1bGUoKXtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIC8vIFNjZW5lQ3RybC5nZXRJbnN0YW5jZSgpLFxuICAgICAgICAgICAgLy8gTWFpblVJQ3RybC5nZXRJbnN0YW5jZSgpLFxuICAgICAgICBdO1xuICAgIH1cblxuICAgIG9uRGVzdHJveSgpe1xuICAgICAgICBmb3IobGV0IGkgaW4gdGhpcy5tb2R1bGVUYWJsZSl7XG4gICAgICAgICAgICBsZXQgbSA9IHRoaXMubW9kdWxlVGFibGVbaV07XG4gICAgICAgICAgICBtLm9mZlRhcmdldCAmJiBtLm9mZlRhcmdldChtKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1vZHVsZVRhYmxlID0gW107XG4gICAgfVxufVxuIiwiaW1wb3J0IEJhc2VNYW5hZ2VyIGZyb20gXCIuLi9iYXNlL0Jhc2VNYW5hZ2VyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFzc2V0c01hbmFnZXIgZXh0ZW5kcyBCYXNlTWFuYWdlciB7XG4gICAgcHJpdmF0ZSBfYXNzZXRzTGlzdDogYW55ID0ge307XG5cbiAgICAvKiog5Yqg6L296aKE5Yi25L2TICovXG4gICAgbG9hZFByZWZhYihwYXRoOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2FkQXNzZXRzQXN5bmMocGF0aCk7XG4gICAgfVxuXG4gICAgLy8gLyoqIOWKoOi9veW4p+WbvueJhyAqL1xuICAgIC8vIGxvYWRTcHJpdGUocGF0aDogc3RyaW5nKTogUHJvbWlzZTxjYy5TcHJpdGVGcmFtZT4ge1xuICAgIC8vICAgICByZXR1cm4gdGhpcy5sb2FkQXNzZXRzQXN5bmMocGF0aCwgY2MuU3ByaXRlRnJhbWUpO1xuICAgIC8vIH1cblxuICAgIC8vIC8qKiDliqDovb3lm77pm4YgKi9cbiAgICAvLyBsb2FkU3ByaXRlQXRsYXMocGF0aDogc3RyaW5nKTogUHJvbWlzZTxjYy5TcHJpdGVBdGxhcz4ge1xuICAgIC8vICAgICByZXR1cm4gdGhpcy5sb2FkQXNzZXRzQXN5bmMocGF0aCwgY2MuU3ByaXRlQXRsYXMpO1xuICAgIC8vIH1cblxuICAgIC8vIC8qKiDliqDovb3pn7PpopEgKi9cbiAgICAvLyBsb2FkQXVkaW9DbGlwKHBhdGg6IHN0cmluZyk6IFByb21pc2U8Y2MuQXVkaW9DbGlwPntcbiAgICAvLyAgICAgcmV0dXJuIHRoaXMubG9hZEFzc2V0c0FzeW5jKHBhdGgsIGNjLkF1ZGlvQ2xpcCk7XG4gICAgLy8gfVxuXG4gICAgLyoqIOWKoOi9vemFjee9riAqL1xuICAgIGxvYWRDb25maWcocGF0aDogc3RyaW5nKTogUHJvbWlzZTxhbnk+e1xuICAgICAgICByZXR1cm4gdGhpcy5sb2FkQXNzZXRzQXN5bmMocGF0aCk7XG4gICAgfVxuXG4gICAgbG9hZEFzc2V0c0FzeW5jKHBhdGg6IHN0cmluZywgdHlwZT86IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZTogRnVuY3Rpb24sIHJlamVjdDogRnVuY3Rpb24pID0+IHtcbiAgICAgICAgICAgIGxldCBfc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICBpZihfc2VsZi5fYXNzZXRzTGlzdFtwYXRoXSl7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShfc2VsZi5fYXNzZXRzTGlzdFtwYXRoXSk7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBMYXlhLmxvYWRlci5sb2FkKHBhdGgsIExheWEuSGFuZGxlci5jcmVhdGUodGhpcywgKHJlcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygn6LWE5rqQ5Yqg6L29LS0tLT4nLCByZXMpO1xuICAgICAgICAgICAgICAgICAgICBpZighcmVzKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF9zZWxmLl9hc3NldHNMaXN0W3BhdGhdID0gcmVzO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlcyk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZWxlYXNlUmVzKHJlc1BhdGg6IHN0cmluZyl7XG4gICAgICAgIC8vIGNjLmxvYWRlci5yZWxlYXNlUmVzKHJlc1BhdGgpO1xuICAgICAgICB0aGlzLl9hc3NldHNMaXN0W3Jlc1BhdGhdID0gbnVsbDtcbiAgICB9XG4gICAgXG4gICAgb25EZXN0cm95KCl7XG4gICAgICAgIC8vIGZvcihsZXQgcGF0aCBpbiB0aGlzLl9hc3NldHNMaXN0KXtcbiAgICAgICAgLy8gICAgIHRoaXMucmVsZWFzZVJlcyhwYXRoKTtcbiAgICAgICAgLy8gfVxuICAgICAgICAvLyB0aGlzLl9hc3NldHNMaXN0ID0ge307XG4gICAgfVxufVxuIiwiaW1wb3J0IEFzc2V0c01hbmFnZXIgZnJvbSBcIi4vQXNzZXRzTWFuYWdlclwiO1xuaW1wb3J0IEJhc2VNYW5hZ2VyIGZyb20gXCIuLi9iYXNlL0Jhc2VNYW5hZ2VyXCI7XG5pbXBvcnQgTWFuYWdlciBmcm9tIFwiLi4vTWFuYWdlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXNNYW5hZ2VyIGV4dGVuZHMgQmFzZU1hbmFnZXIge1xuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLyoqIOiOt+WPlumihOWItuS9kywg5bm255Sf5oiQ5a6e5L6LICovXG4gICAgZ2V0UHJlZmFiKHBhdGg6IHN0cmluZyk6IFByb21pc2U8TGF5YS5TcHJpdGU+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldFByZWZhYihwYXRoKTtcbiAgICB9XG5cbiAgICAvLyAvKiog6I635Y+W6Z+z6aKRICovXG4gICAgLy8gZ2V0QXVkaW8ocGF0aDogc3RyaW5nKTogUHJvbWlzZTxjYy5BdWRpb0NsaXA+IHtcbiAgICAvLyAgICAgcmV0dXJuIHRoaXMuX2dldEF1ZGlvKHBhdGgpO1xuICAgIC8vIH1cblxuICAgIC8qKiDojrflj5ZyZXNvdXJjZXMvdGV4dHVyZXMvZHJhdy/nm67lvZXkuIvnmoTotYTmupAgKi9cbiAgICBnZXRDb21wKG5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIGxldCBwYXRoID0gXCJjb21wL1wiICsgbmFtZSArIFwiLnBuZ1wiO1xuICAgICAgICAvLyBsZXQgYXRsYXNOYW1lID0gXCIwLWRyYXdcIjsgLy/msqHmnInlm77pm4bliJnkuLrnqbpcbiAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgfVxuXG4gICAgLyoqIOiOt+WPlumFjee9riAqL1xuICAgIGdldE1vbnN0ZXJDb25maWcobmFtZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgbGV0IHBhdGggPSBcImNvbmZpZy9hdXRvL1wiO1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0Q29uZmlnKHBhdGggKyBuYW1lKTtcbiAgICB9XG5cbiAgICAvLyAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIHByaXZhdGUgX2Fzc2V0TWdyOiBBc3NldHNNYW5hZ2VyID0gTWFuYWdlci5Bc3NldHM7XG5cbiAgICAvLyAvKiog6I635Y+W5Zu+54mH5pWj5Zu+6LWE5rqQ77yM5aaC5p6c6I635Y+W5aSx6LSl77yM5YiZ5LuO5Zu+6ZuG6YeM6I635Y+WICovXG4gICAgLy8gcHJpdmF0ZSBfZ2V0U3ByaXRlKHBhdGg6IHN0cmluZywgbmFtZTogc3RyaW5nLCBhdGxhc05hbWU/OiBzdHJpbmcpOiBQcm9taXNlPGNjLlNwcml0ZUZyYW1lPiB7XG4gICAgLy8gICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgLy8gICAgICAgICAvKiog6I635Y+W5pWj5Zu+ICovXG4gICAgLy8gICAgICAgICB0aGlzLl9hc3NldE1nci5sb2FkU3ByaXRlKHBhdGggKyBuYW1lKS50aGVuKChzcEZyYW1lOiBjYy5TcHJpdGVGcmFtZSkgPT4ge1xuICAgIC8vICAgICAgICAgICAgIHJlc29sdmUoc3BGcmFtZSk7XG4gICAgLy8gICAgICAgICB9KS5jYXRjaCgoKSA9PiB7XG4gICAgLy8gICAgICAgICAgICAgLyoqIOayoeaVo+WbvuWImeS7juWbvumbhuiOt+WPliAqL1xuICAgIC8vICAgICAgICAgICAgIHRoaXMuX2dldFNwcml0ZUZyYW1lRnJvbUF0bGFzKHBhdGggKyBhdGxhc05hbWUsIG5hbWUpLnRoZW4oKHNwRnJhbWU6IGNjLlNwcml0ZUZyYW1lKSA9PiB7XG4gICAgLy8gICAgICAgICAgICAgICAgIHJlc29sdmUoc3BGcmFtZSk7XG4gICAgLy8gICAgICAgICAgICAgfSkuY2F0Y2goKCkgPT4ge1xuICAgIC8vICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiW1Jlc01hbmFnZXIudHNdLS0tLS0+YXNzZXQgaXMgbm90IGV4aXN0OlwiLCBwYXRoICsgbmFtZSwgXCItLS0+YXRsYXMgYXJlIG5vdDpcIiwgYXRsYXNOYW1lKTtcbiAgICAvLyAgICAgICAgICAgICAgICAgLy8gdGhpcy5fYXNzZXRNZ3IucmVsZWFzZVJlcyhwYXRoICsgYXRsYXNOYW1lKTtcbiAgICAvLyAgICAgICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgLy8gICAgICAgICAgICAgfSk7XG4gICAgLy8gICAgICAgICB9KTtcbiAgICAvLyAgICAgfSk7ICAgXG4gICAgLy8gfVxuXG4gICAgLy8gcHJpdmF0ZSBfZ2V0U3ByaXRlRnJhbWVGcm9tQXRsYXMocGF0aDogc3RyaW5nLCBuYW1lOiBzdHJpbmcpOiBQcm9taXNlPGNjLlNwcml0ZUZyYW1lPiB7XG4gICAgLy8gICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgLy8gICAgICAgICB0aGlzLl9hc3NldE1nci5sb2FkU3ByaXRlQXRsYXMocGF0aCkudGhlbigocmVzOiBjYy5TcHJpdGVBdGxhcykgPT4ge1xuICAgIC8vICAgICAgICAgICAgIGxldCBzcEZyYW1lID0gcmVzLmdldFNwcml0ZUZyYW1lKG5hbWUpO1xuICAgIC8vICAgICAgICAgICAgIGlmKHNwRnJhbWUpe1xuICAgIC8vICAgICAgICAgICAgICAgICByZXNvbHZlKHNwRnJhbWUpO1xuICAgIC8vICAgICAgICAgICAgIH1lbHNle1xuICAgIC8vICAgICAgICAgICAgICAgICByZWplY3QoKTtcbiAgICAvLyAgICAgICAgICAgICB9XG4gICAgLy8gICAgICAgICB9KS5jYXRjaCgoKSA9PiB7XG4gICAgLy8gICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgLy8gICAgICAgICB9KTtcbiAgICAvLyAgICAgfSk7XG4gICAgLy8gfVxuXG4gICAgLyoqIOiOt+WPlumihOWItuS9kyAqL1xuICAgIHByaXZhdGUgX2dldFByZWZhYihwYXRoOiBzdHJpbmcpOiBQcm9taXNlPExheWEuU3ByaXRlPiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9hc3NldE1nci5sb2FkUHJlZmFiKHBhdGgpLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgICAgIGlmKHJlcyl7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzLmNyZWF0ZSgpKTtcbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkuY2F0Y2goKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlamVjdCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2dldENvbmZpZyhwYXRoOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fYXNzZXRNZ3IubG9hZENvbmZpZyhwYXRoKS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICAgICAgICBpZihyZXMpe1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlcyk7XG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICByZWplY3QoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBwcml2YXRlIF9nZXRBdWRpbyhwYXRoOiBzdHJpbmcpOiBQcm9taXNlPGNjLkF1ZGlvQ2xpcD4ge1xuICAgIC8vICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIC8vICAgICAgICAgdGhpcy5fYXNzZXRNZ3IubG9hZEF1ZGlvQ2xpcChwYXRoKS50aGVuKChhdWRpbzogY2MuQXVkaW9DbGlwKSA9PiB7XG4gICAgLy8gICAgICAgICAgICAgaWYoYXVkaW8pe1xuICAgIC8vICAgICAgICAgICAgICAgICByZXNvbHZlKGF1ZGlvKTtcbiAgICAvLyAgICAgICAgICAgICB9ZWxzZXtcbiAgICAvLyAgICAgICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgLy8gICAgICAgICAgICAgfVxuICAgIC8vICAgICAgICAgfSkuY2F0Y2goKCkgPT4ge1xuICAgIC8vICAgICAgICAgICAgIHJlamVjdCgpO1xuICAgIC8vICAgICAgICAgfSk7XG4gICAgLy8gICAgIH0pO1xuICAgIC8vIH1cblxuICAgIG9uRGVzdHJveSgpe1xuXG4gICAgfVxufVxuIiwiaW1wb3J0IEJhc2VNYW5hZ2VyIGZyb20gXCIuLi9iYXNlL0Jhc2VNYW5hZ2VyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNvdW5kTWFuYWdlciBleHRlbmRzIEJhc2VNYW5hZ2VyIHtcbiAgICBwcml2YXRlIF9jdXJyZW50OiBudW1iZXIgPSAwO1xuICAgIHByaXZhdGUgX2xvYWRMaXN0OiBPYmplY3QgPSB7fTtcblxuICAgIHBsYXkocGF0aDogc3RyaW5nLCBsb29wTnVtOiBudW1iZXIgPSAxLCB2b2x1bWU6IG51bWJlciA9IDEpe1xuICAgICAgICAvLyBNYW5hZ2VyLlJlcy5nZXRBdWRpbyhwYXRoKS50aGVuKChhdWRpbzogY2MuQXVkaW9DbGlwKSA9PiB7XG4gICAgICAgIC8vICAgICB0aGlzLl9jdXJyZW50ID0gY2MuYXVkaW9FbmdpbmUucGxheShhdWRpbywgbG9vcCwgdm9sdW1lKTtcbiAgICAgICAgLy8gICAgIHRoaXMuX2xvYWRMaXN0W3BhdGhdID0gYXVkaW87XG4gICAgICAgIC8vIH0pO1xuICAgICAgICBMYXlhLlNvdW5kTWFuYWdlci5wbGF5U291bmQocGF0aCwgbG9vcE51bSwgTGF5YS5IYW5kbGVyLmNyZWF0ZSh0aGlzLCAoKSA9PiB7XG5cbiAgICAgICAgfSksIDApO1xuICAgIH1cblxuICAgIC8vIHBhdXNlQ3VycmVudCgpe1xuICAgIC8vICAgICBjYy5hdWRpb0VuZ2luZS5wYXVzZSh0aGlzLl9jdXJyZW50KTtcbiAgICAvLyB9XG5cbiAgICAvLyBwYXVzZUFsbCgpe1xuICAgIC8vICAgICBjYy5hdWRpb0VuZ2luZS5wYXVzZUFsbCgpO1xuICAgIC8vIH1cblxuICAgIC8vIHN0b3BDdXJyZW50KCl7XG4gICAgLy8gICAgIGNjLmF1ZGlvRW5naW5lLnN0b3AodGhpcy5fY3VycmVudCk7XG4gICAgLy8gfVxuXG4gICAgLy8gc3RvcEFsbCgpe1xuICAgIC8vICAgICBjYy5hdWRpb0VuZ2luZS5zdG9wQWxsKCk7XG4gICAgLy8gfVxuXG4gICAgLy8gcmVzdW1lQ3VycmVudCgpe1xuICAgIC8vICAgICBjYy5hdWRpb0VuZ2luZS5yZXN1bWUodGhpcy5fY3VycmVudCk7XG4gICAgLy8gfVxuXG4gICAgLy8gcmVzdW1lQWxsKCl7XG4gICAgLy8gICAgIGNjLmF1ZGlvRW5naW5lLnJlc3VtZUFsbCgpO1xuICAgIC8vIH1cblxuICAgIG9uRGVzdHJveSgpe1xuICAgICAgICB0aGlzLl9sb2FkTGlzdCA9IHt9O1xuICAgIH1cbn1cbiIsImltcG9ydCB7IE1WQ1MgfSBmcm9tIFwiLi4vLi4vY29yZS9tdmMvbXZjc1wiO1xuaW1wb3J0IEJhc2VNYW5hZ2VyIGZyb20gXCIuLi9iYXNlL0Jhc2VNYW5hZ2VyXCI7XG5pbXBvcnQgTWFuYWdlciBmcm9tIFwiLi4vTWFuYWdlclwiO1xuXG5sZXQgdyA9IDY0MDtcbmxldCBoID0gMTEzNjtcblxuY2xhc3Mgdmlld0VsZW1lbnQge1xuICAgIC8qKiDotYTmupDot6/lvoQgKi9cbiAgICBwYXRoOiBzdHJpbmc7XG4gICAgLyoqIOWxgue6pyAqL1xuICAgIHpJbmRleDogbnVtYmVyO1xuICAgIC8qKiDmiZPlvIDmlYjmnpwgKi9cbiAgICBvcGVuRWZmZWN0OiBudW1iZXI7XG4gICAgLyoqIOWunuS+i+iEmuacrCAqL1xuICAgIGluc3RhbmNlOiBNVkNTLlZpZXc7XG4gICAgLyoqIOWunuS+i+iKgueCuSAqL1xuICAgIG5vZGU6IExheWEuU3ByaXRlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVSU1hbmFnZXIgZXh0ZW5kcyBCYXNlTWFuYWdlciB7XG4gICAgcHJpdmF0ZSBfdmlld3M6IHtba2V5OiBzdHJpbmddOiB2aWV3RWxlbWVudH0gPSB7fTtcblxuICAgIHByaXZhdGUgX3Jvb3Q6IExheWEuU3ByaXRlID0gbmV3IExheWEuU3ByaXRlKCk7XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fcm9vdC53aWR0aCA9IHc7XG4gICAgICAgIHRoaXMuX3Jvb3QuaGVpZ2h0ID0gaDtcbiAgICAgICAgdGhpcy5fcm9vdC54ID0gMDtcbiAgICAgICAgdGhpcy5fcm9vdC55ID0gMDtcbiAgICAgICAgdGhpcy5fcm9vdC56T3JkZXIgPSAxO1xuICAgICAgICBsZXQgd2lkOiBMYXlhLldpZGdldCA9IHRoaXMuX3Jvb3QuYWRkQ29tcG9uZW50KExheWEuV2lkZ2V0KTtcbiAgICAgICAgbGV0IGR3ID0gTGF5YS5zdGFnZS5kZXNpZ25XaWR0aDtcbiAgICAgICAgbGV0IGRoID0gTGF5YS5zdGFnZS5kZXNpZ25IZWlnaHQ7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiVUlNYW5hZ2VyLS0tLS0+TGF5YVN0YWdlIGRlc2lnblc6IFwiLCBkdywgXCIgZGVzaWduSDogXCIsIGRoKTtcbiAgICAgICAgd2lkLmNlbnRlclggPSBkdyAvIDI7XG4gICAgICAgIHdpZC5jZW50ZXJZID0gZGggLyAyO1xuICAgICAgICBMYXlhLnN0YWdlLmFkZENoaWxkKHRoaXMuX3Jvb3QpO1xuICAgIH1cblxuICAgIG9wZW4ocmVzUGF0aDogc3RyaW5nLCB6SW5kZXg/OiBudW1iZXIsIG9wZW5FZmZlY3Q/OiBudW1iZXIpOiBQcm9taXNlPExheWEuU3ByaXRlPntcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICBsZXQgdmlldyA9IHRoaXMuX3ZpZXdzW3Jlc1BhdGhdO1xuICAgICAgICAgICAgaWYoIXZpZXcpe1xuICAgICAgICAgICAgICAgIHZpZXcgPSBuZXcgdmlld0VsZW1lbnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBvcGVuU3VjID0gKHZpZXdOb2RlOiBMYXlhLlNwcml0ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHZpZXdOb2RlLnpPcmRlciA9IHpJbmRleCB8fCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoIXZpZXcubm9kZSl7XG4gICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlVmlldyhyZXNQYXRoKS50aGVuKCh2aWV3T2JqOiBMYXlhLlNwcml0ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBvcGVuU3VjKHZpZXdPYmopO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHZpZXdPYmopO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgdmlldy5ub2RlLnZpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIG9wZW5TdWModmlldy5ub2RlKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHZpZXcubm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldFZpZXc8VD4ocmVzUGF0aDogc3RyaW5nKTogUHJvbWlzZTxUPntcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICBsZXQgdmlldzogYW55ID0gdGhpcy5fdmlld3NbcmVzUGF0aF07XG4gICAgICAgICAgICBpZighdmlldyl7XG4gICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlVmlldyhyZXNQYXRoKS50aGVuKCh2aWV3OiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh2aWV3Lmluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIHJlc29sdmUodmlldy5pbnN0YW5jZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWFs+mXrXVpXG4gICAgICogQHBhcmFtIHJlc1BhdGgg6Lev5b6EXG4gICAgICogQHBhcmFtIGlzRGVsZXRlIOaYr+WQpumUgOavgVxuICAgICAqL1xuICAgIGNsb3NlKHJlc1BhdGg6IHN0cmluZywgaXNEZWxldGU6IGJvb2xlYW4gPSBmYWxzZSl7XG4gICAgICAgIGxldCB2aWV3ID0gdGhpcy5fdmlld3NbcmVzUGF0aF07XG4gICAgICAgIGNvbnNvbGUubG9nKHZpZXcsIHJlc1BhdGgpO1xuICAgICAgICBpZih2aWV3ICYmIHZpZXcubm9kZSl7XG4gICAgICAgICAgICBpZihpc0RlbGV0ZSl7XG4gICAgICAgICAgICAgICAgdmlldy5ub2RlLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB0aGlzLl92aWV3c1tyZXNQYXRoXSA9IG51bGw7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICB2aWV3Lm5vZGUudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfY3JlYXRlVmlldyhyZXNQYXRoOiBzdHJpbmcpOiBQcm9taXNlPExheWEuU3ByaXRlPiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgbGV0IHZpZXcgPSB0aGlzLl92aWV3c1tyZXNQYXRoXTtcbiAgICAgICAgICAgIGlmKCF2aWV3KXtcbiAgICAgICAgICAgICAgICB2aWV3ID0gbmV3IHZpZXdFbGVtZW50KCk7XG4gICAgICAgICAgICAgICAgTWFuYWdlci5SZXMuZ2V0UHJlZmFiKHJlc1BhdGgpLnRoZW4oKHZpZXdPYmo6IExheWEuU3ByaXRlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBuYW1lcyA9IHJlc1BhdGguc3BsaXQoXCIvXCIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yb290LmFkZENoaWxkKHZpZXdPYmopO1xuICAgICAgICAgICAgICAgICAgICB2aWV3Lmluc3RhbmNlID0gdmlld09iai5nZXRDb21wb25lbnQobmFtZXNbbmFtZXMubGVuZ3RoIC0gMV0pO1xuICAgICAgICAgICAgICAgICAgICB2aWV3Lm5vZGUgPSB2aWV3T2JqO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl92aWV3c1tyZXNQYXRoXSA9IHZpZXc7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUodmlld09iaik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHZpZXcubm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9uRGVzdHJveSgpe1xuICAgICAgICB0aGlzLl92aWV3cyA9IHt9O1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFVJUGF0aCB9IGZyb20gXCIuL3VpcGF0aC9VSVBhdGhcIjtcbmltcG9ydCB7IENvbmZpZ1BhdGggfSBmcm9tIFwiLi9jb25maWdwYXRoL0NvbmZpZ1BhdGhcIjtcbmltcG9ydCB7IEF1ZGlvUGF0aCB9IGZyb20gXCIuL2F1ZGlvcGF0aC9BdWRpb1BhdGhcIjtcbmltcG9ydCB7IEVudGl0eVBhdGggfSBmcm9tIFwiLi9lbnRpdHlwYXRoL0VudGl0eVBhdGhcIjtcblxuXG4vKiog6LWE5rqQ6Lev5b6E6K+75Y+WKHJvb3Q6IHJlc291cmNlcykgKi9cbmV4cG9ydCBuYW1lc3BhY2UgUmVzUGF0aCB7XG4gICAgZXhwb3J0IGNvbnN0IHVpUGF0aCA9IFVJUGF0aDtcbiAgICBleHBvcnQgY29uc3QgZW50aXR5UGF0aCA9IEVudGl0eVBhdGg7XG4gICAgZXhwb3J0IGNvbnN0IGNvbmZpZ1BhdGggPSBDb25maWdQYXRoO1xuICAgIGV4cG9ydCBjb25zdCBhdWRpb1BhdGggPSBBdWRpb1BhdGg7XG59XG4iLCJleHBvcnQgY29uc3QgQXVkaW9QYXRoID0ge1xuICAgIGJ0bkNsaWNrOiBcInNvdW5kL2J0bl9jbGljay5tcDNcIlxufSIsImV4cG9ydCBjb25zdCBDb25maWdQYXRoID0ge1xuICAgIEF1dG9fTW9uc3RlcjE6IFwiY29uZmlnL2F1dG8vbW9uc3RlcjEuanNvblwiLFxufSIsIi8qKiDlrp7kvZPot6/lvoQgKi9cbmV4cG9ydCBjb25zdCBFbnRpdHlQYXRoID0ge1xuICAgIC8qKiDmgKrniakgKi9cbiAgICBFbnRpdHlfTW9uc3RlcjogXCJwcmVmYWJzL2ZpZ2h0L21vbnN0ZXIvTW9uc3RlclwiLFxufSIsIi8qKiBVSei3r+W+hCAqL1xuZXhwb3J0IGNvbnN0IFVJUGF0aCA9IHtcbiAgICAvKiog5Zy65pmvVUkgKi9cbiAgICBVSV9TY2VuZTogXCJwcmVmYWJzL3NjZW5lL1NjZW5lVmlld1wiLFxuICAgIC8qKiDkuLvnlYzpnaIgKi9cbiAgICBVSV9NYWluVUk6IFwicHJlZmFicy9VSS9tZW51L01lbnVWaWV3LnByZWZhYlwiLFxufSIsIi8qKlRoaXMgY2xhc3MgaXMgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgYnkgTGF5YUFpcklERSwgcGxlYXNlIGRvIG5vdCBtYWtlIGFueSBtb2RpZmljYXRpb25zLiAqL1xuaW1wb3J0IFZpZXc9TGF5YS5WaWV3O1xyXG5pbXBvcnQgRGlhbG9nPUxheWEuRGlhbG9nO1xyXG5pbXBvcnQgU2NlbmU9TGF5YS5TY2VuZTtcbnZhciBSRUc6IEZ1bmN0aW9uID0gTGF5YS5DbGFzc1V0aWxzLnJlZ0NsYXNzO1xuZXhwb3J0IG1vZHVsZSB1aS50ZXN0IHtcclxuICAgIGV4cG9ydCBjbGFzcyBUZXN0U2NlbmVVSSBleHRlbmRzIFNjZW5lIHtcclxuICAgICAgICBjb25zdHJ1Y3RvcigpeyBzdXBlcigpfVxyXG4gICAgICAgIGNyZWF0ZUNoaWxkcmVuKCk6dm9pZCB7XHJcbiAgICAgICAgICAgIHN1cGVyLmNyZWF0ZUNoaWxkcmVuKCk7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZFNjZW5lKFwidGVzdC9UZXN0U2NlbmVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgUkVHKFwidWkudGVzdC5UZXN0U2NlbmVVSVwiLFRlc3RTY2VuZVVJKTtcclxufVxyIl19
