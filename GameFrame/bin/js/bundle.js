var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
const GameLaunch_1 = require("./script/GameLaunch");
const GameUI_1 = require("./script/GameUI");
const MenuView_1 = require("./script/game/menu/MenuView");
/*
* 游戏初始化配置;
*/
class GameConfig {
    constructor() { }
    static init() {
        var reg = Laya.ClassUtils.regClass;
        reg("script/GameLaunch.ts", GameLaunch_1.default);
        reg("script/GameUI.ts", GameUI_1.default);
        reg("script/game/menu/MenuView.ts", MenuView_1.default);
    }
}
GameConfig.width = 640;
GameConfig.height = 1136;
GameConfig.scaleMode = "fixedwidth";
GameConfig.screenMode = "none";
GameConfig.alignV = "top";
GameConfig.alignH = "left";
GameConfig.startScene = "GameMain.scene";
GameConfig.sceneRoot = "";
GameConfig.debug = false;
GameConfig.stat = true;
GameConfig.physicsDebug = false;
GameConfig.exportSceneToJson = true;
exports.default = GameConfig;
GameConfig.init();

},{"./script/GameLaunch":3,"./script/GameUI":4,"./script/game/menu/MenuView":5}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const GameConfig_1 = require("./GameConfig");
class Main {
    constructor() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    onVersionLoaded() {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    }
    onConfigLoaded() {
        //加载IDE指定的场景
        GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene);
    }
}
//激活启动类
new Main();

},{"./GameConfig":1}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Manager_1 = require("./manager/Manager");
class GameLaunch extends Laya.Script {
    constructor() {
        super();
        this._showLog = true;
        this._managerList = [];
    }
    onAwake() {
        this._managerList.push(new Manager_1.default());
        console.log('[GameLaunch.ts]---->初始化');
        this.initScene3D();
        this.test();
    }
    test() {
        // Manager.UI.open(ResPath.uiPath.UI_MainUI, 1, 1);
    }
    initScene3D() {
        //添加3D场景
        let scene = new Laya.Scene3D();
        Laya.stage.addChild(scene);
        // var scene: Laya.Scene3D = Laya.stage.addChild(new Laya.Scene3D()) as Laya.Scene3D;
        //添加照相机
        var camera = (scene.addChild(new Laya.Camera(0, 0.1, 100)));
        camera.transform.translate(new Laya.Vector3(0, 3, 3));
        camera.transform.rotate(new Laya.Vector3(-30, 0, 0), true, false);
        //添加方向光
        var directionLight = scene.addChild(new Laya.DirectionLight());
        directionLight.color = new Laya.Vector3(0.6, 0.6, 0.6);
        directionLight.transform.worldMatrix.setForward(new Laya.Vector3(1, -1, 0));
        //添加自定义模型
        var box = scene.addChild(new Laya.MeshSprite3D(Laya.PrimitiveMesh.createBox(1, 1, 1)));
        box.transform.rotate(new Laya.Vector3(0, 45, 0), false, false);
        var material = new Laya.BlinnPhongMaterial();
        Laya.Texture2D.load("res/layabox.png", Laya.Handler.create(null, function (tex) {
            material.albedoTexture = tex;
        }));
        box.meshRenderer.material = material;
        Laya.timer.loop(16, this, () => {
            box.transform.rotate(new Laya.Vector3(0, 120 * 0.016, 0), false, false);
        });
    }
    onDisable() {
        for (let i = 0; i < this._managerList.length; ++i) {
            this._managerList[i].onDestroy();
        }
        this._managerList = [];
    }
    showLog() {
        if (!this._showLog) {
            console.log = () => { };
            console.error = () => { };
        }
    }
}
exports.default = GameLaunch;

},{"./manager/Manager":6}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const layaMaxUI_1 = require("./../ui/layaMaxUI");
/**
 * 本示例采用非脚本的方式实现，而使用继承页面基类，实现页面逻辑。在IDE里面设置场景的Runtime属性即可和场景进行关联
 * 相比脚本方式，继承式页面类，可以直接使用页面定义的属性（通过IDE内var属性定义），比如this.tipLbll，this.scoreLbl，具有代码提示效果
 * 建议：如果是页面级的逻辑，需要频繁访问页面内多个元素，使用继承式写法，如果是独立小模块，功能单一，建议用脚本方式实现，比如子弹脚本。
 */
class GameUI extends layaMaxUI_1.ui.test.TestSceneUI {
    constructor() {
        super();
        //添加3D场景
        var scene = Laya.stage.addChild(new Laya.Scene3D());
        //添加照相机
        var camera = (scene.addChild(new Laya.Camera(0, 0.1, 100)));
        camera.transform.translate(new Laya.Vector3(0, 3, 3));
        camera.transform.rotate(new Laya.Vector3(-30, 0, 0), true, false);
        //添加方向光
        var directionLight = scene.addChild(new Laya.DirectionLight());
        directionLight.color = new Laya.Vector3(0.6, 0.6, 0.6);
        directionLight.transform.worldMatrix.setForward(new Laya.Vector3(1, -1, 0));
        //添加自定义模型
        var box = scene.addChild(new Laya.MeshSprite3D(Laya.PrimitiveMesh.createBox(1, 1, 1)));
        box.transform.rotate(new Laya.Vector3(0, 45, 0), false, false);
        var material = new Laya.BlinnPhongMaterial();
        Laya.Texture2D.load("res/layabox.png", Laya.Handler.create(null, function (tex) {
            material.albedoTexture = tex;
        }));
        box.meshRenderer.material = material;
    }
}
exports.default = GameUI;

},{"./../ui/layaMaxUI":13}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Manager_1 = require("../../manager/Manager");
class MenuView extends Laya.Script {
    constructor() {
        super();
        /** @prop {name:img, tips:"整数类型示例", type:Laya.Sprite, default:null}*/
        this.img = null;
    }
    onEnable() {
    }
    onAwake() {
        console.log('[MenuView.ts]---->初始化');
        let img = this.owner.getChildByName("img");
        img.skin = Manager_1.default.Res.getComp("btn_close");
        console.log(img.skin);
    }
    onDisable() {
    }
}
exports.default = MenuView;

},{"../../manager/Manager":6}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ModuleManager_1 = require("./modulemanager/ModuleManager");
const SoundManager_1 = require("./soundmanager/SoundManager");
const UIManager_1 = require("./uimanager/UIManager");
const ResManager_1 = require("./resmanager/ResManager");
const AssetsManager_1 = require("./resmanager/AssetsManager");
class Manager {
    constructor() {
        // Manager.Module;
        // Manager.UI;
        // Manager.Assets;
        // Manager.Sound;
        // Manager.Res;
    }
    static get Assets() {
        if (!this._assetsManager) {
            this._assetsManager = new AssetsManager_1.default();
        }
        return this._assetsManager;
    }
    static get Module() {
        if (!this._moduleManager) {
            this._moduleManager = new ModuleManager_1.default();
        }
        return this._moduleManager;
    }
    static get Sound() {
        if (!this._soundManager) {
            this._soundManager = new SoundManager_1.default();
        }
        return this._soundManager;
    }
    static get UI() {
        if (!this._uiManager) {
            this._uiManager = new UIManager_1.default();
        }
        return this._uiManager;
    }
    static get Res() {
        if (!this._resManager) {
            this._resManager = new ResManager_1.default();
        }
        return this._resManager;
    }
}
/** 资源加载管理 */
Manager._assetsManager = null;
/** 玩法模块加载管理 */
Manager._moduleManager = null;
/** 音频加载管理 */
Manager._soundManager = null;
/** UI管理 */
Manager._uiManager = null;
/** 资源获取管理 */
Manager._resManager = null;
exports.default = Manager;

},{"./modulemanager/ModuleManager":8,"./resmanager/AssetsManager":9,"./resmanager/ResManager":10,"./soundmanager/SoundManager":11,"./uimanager/UIManager":12}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class BaseManager {
}
exports.default = BaseManager;

},{}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseManager_1 = require("../base/BaseManager");
class ModuleManager extends BaseManager_1.default {
    constructor() {
        super();
        this.moduleTable = [];
        this.moduleTable = this.initModule();
    }
    initModule() {
        return [
        // SceneCtrl.getInstance(),
        // MainUICtrl.getInstance(),
        ];
    }
    onDestroy() {
        for (let i in this.moduleTable) {
            let m = this.moduleTable[i];
            m.offTarget && m.offTarget(m);
        }
        this.moduleTable = [];
    }
}
exports.default = ModuleManager;

},{"../base/BaseManager":7}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseManager_1 = require("../base/BaseManager");
class AssetsManager extends BaseManager_1.default {
    constructor() {
        super(...arguments);
        this._assetsList = {};
    }
    /** 加载预制体 */
    loadPrefab(path) {
        return this.loadAssetsAsync(path);
    }
    // /** 加载帧图片 */
    // loadSprite(path: string): Promise<cc.SpriteFrame> {
    //     return this.loadAssetsAsync(path, cc.SpriteFrame);
    // }
    // /** 加载图集 */
    // loadSpriteAtlas(path: string): Promise<cc.SpriteAtlas> {
    //     return this.loadAssetsAsync(path, cc.SpriteAtlas);
    // }
    // /** 加载音频 */
    // loadAudioClip(path: string): Promise<cc.AudioClip>{
    //     return this.loadAssetsAsync(path, cc.AudioClip);
    // }
    // /** 加载配置 */
    // loadConfig(path: string): Promise<cc.JsonAsset>{
    //     return this.loadAssetsAsync(path, cc.JsonAsset);
    // }
    loadAssetsAsync(path, type) {
        return new Promise((resolve, reject) => {
            let _self = this;
            if (_self._assetsList[path]) {
                resolve(_self._assetsList[path]);
            }
            else {
                Laya.loader.load(path, Laya.Handler.create(this, (res) => {
                    console.log('资源加载---->', res);
                    if (!res) {
                        reject();
                        return;
                    }
                    _self._assetsList[path] = res;
                    resolve(res);
                }));
            }
        });
    }
    releaseRes(resPath) {
        // cc.loader.releaseRes(resPath);
        this._assetsList[resPath] = null;
    }
    onDestroy() {
        // for(let path in this._assetsList){
        //     this.releaseRes(path);
        // }
        // this._assetsList = {};
    }
}
exports.default = AssetsManager;

},{"../base/BaseManager":7}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseManager_1 = require("../base/BaseManager");
const Manager_1 = require("../Manager");
class ResManager extends BaseManager_1.default {
    constructor() {
        super(...arguments);
        // /** 获取配置 */
        // getMonsterConfig(name: string): Promise<cc.JsonAsset> {
        //     let path = "config/auto/";
        //     return this._getConfig(path + name);
        // }
        // //------------------------------------------------------------
        this._assetMgr = Manager_1.default.Assets;
    }
    //------------------------------------------------------------
    /** 获取预制体, 并生成实例 */
    getPrefab(path) {
        return this._getPrefab(path);
    }
    // /** 获取音频 */
    // getAudio(path: string): Promise<cc.AudioClip> {
    //     return this._getAudio(path);
    // }
    /** 获取resources/textures/draw/目录下的资源 */
    getComp(name) {
        let path = "comp/" + name + ".png";
        // let atlasName = "0-draw"; //没有图集则为空
        return path;
    }
    // /** 获取图片散图资源，如果获取失败，则从图集里获取 */
    // private _getSprite(path: string, name: string, atlasName?: string): Promise<cc.SpriteFrame> {
    //     return new Promise((resolve, reject) => {
    //         /** 获取散图 */
    //         this._assetMgr.loadSprite(path + name).then((spFrame: cc.SpriteFrame) => {
    //             resolve(spFrame);
    //         }).catch(() => {
    //             /** 没散图则从图集获取 */
    //             this._getSpriteFrameFromAtlas(path + atlasName, name).then((spFrame: cc.SpriteFrame) => {
    //                 resolve(spFrame);
    //             }).catch(() => {
    //                 console.error("[ResManager.ts]----->asset is not exist:", path + name, "--->atlas are not:", atlasName);
    //                 // this._assetMgr.releaseRes(path + atlasName);
    //                 reject();
    //             });
    //         });
    //     });   
    // }
    // private _getSpriteFrameFromAtlas(path: string, name: string): Promise<cc.SpriteFrame> {
    //     return new Promise((resolve, reject) => {
    //         this._assetMgr.loadSpriteAtlas(path).then((res: cc.SpriteAtlas) => {
    //             let spFrame = res.getSpriteFrame(name);
    //             if(spFrame){
    //                 resolve(spFrame);
    //             }else{
    //                 reject();
    //             }
    //         }).catch(() => {
    //             reject();
    //         });
    //     });
    // }
    /** 获取预制体 */
    _getPrefab(path) {
        return new Promise((resolve, reject) => {
            this._assetMgr.loadPrefab(path).then((res) => {
                if (res) {
                    resolve(res.create());
                }
                else {
                    reject();
                }
            }).catch(() => {
                reject();
            });
        });
    }
    // private _getConfig(path: string): Promise<cc.JsonAsset> {
    //     return new Promise((resolve, reject) => {
    //         this._assetMgr.loadConfig(path).then((res) => {
    //             if(res){
    //                 resolve(res.json);
    //             }else{
    //                 reject();
    //             }
    //         }).catch(() => {
    //             reject();
    //         });
    //     });
    // }
    // private _getAudio(path: string): Promise<cc.AudioClip> {
    //     return new Promise((resolve, reject) => {
    //         this._assetMgr.loadAudioClip(path).then((audio: cc.AudioClip) => {
    //             if(audio){
    //                 resolve(audio);
    //             }else{
    //                 reject();
    //             }
    //         }).catch(() => {
    //             reject();
    //         });
    //     });
    // }
    onDestroy() {
    }
}
exports.default = ResManager;

},{"../Manager":6,"../base/BaseManager":7}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseManager_1 = require("../base/BaseManager");
class SoundManager extends BaseManager_1.default {
    constructor() {
        super(...arguments);
        this._current = 0;
        this._loadList = {};
    }
    // play(path: string, loop: boolean = false, volume: number = 1){
    //     Manager.Res.getAudio(path).then((audio: cc.AudioClip) => {
    //         this._current = cc.audioEngine.play(audio, loop, volume);
    //         this._loadList[path] = audio;
    //     });
    // }
    // pauseCurrent(){
    //     cc.audioEngine.pause(this._current);
    // }
    // pauseAll(){
    //     cc.audioEngine.pauseAll();
    // }
    // stopCurrent(){
    //     cc.audioEngine.stop(this._current);
    // }
    // stopAll(){
    //     cc.audioEngine.stopAll();
    // }
    // resumeCurrent(){
    //     cc.audioEngine.resume(this._current);
    // }
    // resumeAll(){
    //     cc.audioEngine.resumeAll();
    // }
    onDestroy() {
        this._loadList = {};
    }
}
exports.default = SoundManager;

},{"../base/BaseManager":7}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseManager_1 = require("../base/BaseManager");
const Manager_1 = require("../Manager");
let w = 640;
let h = 1136;
class viewElement {
}
class UIManager extends BaseManager_1.default {
    constructor() {
        super();
        this._views = {};
        this._root = new Laya.Sprite();
        this._root.width = w;
        this._root.height = h;
        this._root.x = 0;
        this._root.y = 0;
        this._root.zOrder = 1;
        Laya.stage.addChild(this._root);
    }
    open(resPath, zIndex, openEffect) {
        return new Promise((resolve) => {
            let view = this._views[resPath];
            if (!view) {
                view = new viewElement();
            }
            let openSuc = (viewNode) => {
                viewNode.zOrder = zIndex || 0;
            };
            if (!view.node) {
                this._createView(resPath).then((viewObj) => {
                    openSuc(viewObj);
                    resolve(viewObj);
                });
            }
            else {
                view.node.visible = true;
                openSuc(view.node);
                resolve(view.node);
            }
        });
    }
    getView(resPath) {
        return new Promise((resolve) => {
            let view = this._views[resPath];
            if (!view) {
                this._createView(resPath).then((view) => {
                    resolve(view.instance);
                });
            }
            else {
                resolve(view.instance);
            }
        });
    }
    /**
     * 关闭ui
     * @param resPath 路径
     * @param isDelete 是否销毁
     */
    close(resPath, isDelete = false) {
        let view = this._views[resPath];
        console.log(view, resPath);
        if (view && view.node) {
            if (isDelete) {
                view.node.destroy();
                this._views[resPath] = null;
            }
            else {
                view.node.visible = false;
            }
        }
    }
    _createView(resPath) {
        return new Promise((resolve) => {
            let view = this._views[resPath];
            if (!view) {
                view = new viewElement();
                Manager_1.default.Res.getPrefab(resPath).then((viewObj) => {
                    let names = resPath.split("/");
                    this._root.addChild(viewObj);
                    view.instance = viewObj.getComponent(names[names.length - 1]);
                    view.node = viewObj;
                    this._views[resPath] = view;
                    resolve(viewObj);
                });
            }
            else {
                resolve(view.node);
            }
        });
    }
    onDestroy() {
        this._views = {};
    }
}
exports.default = UIManager;

},{"../Manager":6,"../base/BaseManager":7}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Scene = Laya.Scene;
var REG = Laya.ClassUtils.regClass;
var ui;
(function (ui) {
    var test;
    (function (test) {
        class TestSceneUI extends Scene {
            constructor() { super(); }
            createChildren() {
                super.createChildren();
                this.loadScene("test/TestScene");
            }
        }
        test.TestSceneUI = TestSceneUI;
        REG("ui.test.TestSceneUI", TestSceneUI);
    })(test = ui.test || (ui.test = {}));
})(ui = exports.ui || (exports.ui = {}));

},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
